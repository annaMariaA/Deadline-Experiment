facet_grid(. ~ n) +
geom_vline(xintercept = c(96, 97), size = 1, colour = "grey") +
scale_fill_brewer(name = "deadline", palette = "Set2",) +
scale_color_brewer(name = "deadline", palette = "Dark2") +
scale_x_continuous("trial", breaks = seq(1, 192, 24)) +
scale_y_continuous("prop. fix. hetero", breaks = seq(0, 1, 0.1)) +
coord_cartesian(ylim = c(0.1, 0.9)) +
theme_tidybayes() +
theme(
legend.justification=c(1,0),
legend.position=c(1,0),
legend.box.background = element_rect(size=1)) +
# geom_point(data = rolling_fix_prop, aes(y = prop_fix), alpha = 0.25) +
geom_path(data = rolling_fix_prop, aes(y = prop_fix), alpha = 0.33) +
ggsave("scratch/strat_over_trials.png", width = 12, height = 5)
# get_variables(m)
# m %>% gather_draws(b_trial,  `b_trial:n3`, `b_trial:n4`, `b_trial:n5`) %>%
# 	ggplot(aes(x = .value, fill = .variable)) + geom_density(alpha = 0.33)
# dat_p$p <- predict(m, dat_p)[, 1]
# ggplot(dat_p, aes(x  = trial, y = p, colour = n )) + geom_point()
?facet_wrap
dat_m %>%
group_by(block) %>%
modelr::data_grid(condition, n, t) %>%
# mutate(n = fct_rev(n)) %>%
add_fitted_draws(m_block_trial, re_formula = NA) %>%
ggplot(
aes(
x = t, y = .value,
colour = condition, fill = condition)) +
geom_hline(yintercept = 0.5, linetype = 2) +
stat_lineribbon(aes(y = .value), .width = c(0.90, 0.75, .50), alpha = 1/4) +
facet_grid(. ~ n, nrow = 2) +
geom_vline(xintercept = c(96, 97), size = 1, colour = "grey") +
scale_fill_brewer(name = "deadline", palette = "Set2",) +
scale_color_brewer(name = "deadline", palette = "Dark2") +
scale_x_continuous("trial", breaks = seq(1, 192, 24)) +
scale_y_continuous("prop. fix. hetero", breaks = seq(0, 1, 0.1)) +
coord_cartesian(ylim = c(0.1, 0.9)) +
theme_tidybayes() +
theme(
legend.justification=c(1,0),
legend.position=c(1,0),
legend.box.background = element_rect(size=1)) +
# geom_point(data = rolling_fix_prop, aes(y = prop_fix), alpha = 0.25) +
geom_path(data = rolling_fix_prop, aes(y = prop_fix), alpha = 0.33) +
ggsave("scratch/strat_over_trials.png", width = 12, height = 5)
# get_variables(m)
# m %>% gather_draws(b_trial,  `b_trial:n3`, `b_trial:n4`, `b_trial:n5`) %>%
# 	ggplot(aes(x = .value, fill = .variable)) + geom_density(alpha = 0.33)
# dat_p$p <- predict(m, dat_p)[, 1]
# ggplot(dat_p, aes(x  = trial, y = p, colour = n )) + geom_point()
dat_m %>%
group_by(block) %>%
modelr::data_grid(condition, n, t) %>%
# mutate(n = fct_rev(n)) %>%
add_fitted_draws(m_block_trial, re_formula = NA) %>%
ggplot(
aes(
x = t, y = .value,
colour = condition, fill = condition)) +
geom_hline(yintercept = 0.5, linetype = 2) +
stat_lineribbon(aes(y = .value), .width = c(0.90, 0.75, .50), alpha = 1/4) +
facet_wrap(. ~ n, nrow = 2) +
geom_vline(xintercept = c(96, 97), size = 1, colour = "darkgrey") +
scale_fill_brewer(name = "deadline", palette = "Set2",) +
scale_color_brewer(name = "deadline", palette = "Dark2") +
scale_x_continuous("trial", breaks = seq(1, 192, 24)) +
scale_y_continuous("prop. fix. hetero", breaks = seq(0, 1, 0.1)) +
coord_cartesian(ylim = c(0.1, 0.9)) +
theme_tidybayes() +
theme(
legend.justification=c(1,0),
legend.position=c(1,0),
legend.box.background = element_rect(size=1)) +
# geom_point(data = rolling_fix_prop, aes(y = prop_fix), alpha = 0.25) +
geom_path(data = rolling_fix_prop, aes(y = prop_fix), alpha = 0.33) +
ggsave("scratch/strat_over_trials.png", width = 12, height = 5)
# get_variables(m)
# m %>% gather_draws(b_trial,  `b_trial:n3`, `b_trial:n4`, `b_trial:n5`) %>%
# 	ggplot(aes(x = .value, fill = .variable)) + geom_density(alpha = 0.33)
legend.justification=c(1,0),
legend.position=c(1,0),
legend.box.background = element_rect(size=1)) +
# geom_point(data = rolling_fix_prop, aes(y = prop_fix), alpha = 0.25) +
geom_path(data = rolling_fix_prop, aes(y = prop_fix), alpha = 0.33) +
ggsave("scratch/strat_over_trials.png", width = 9, height = 5)
dat_m %>%
group_by(block) %>%
modelr::data_grid(condition, n, t) %>%
# mutate(n = fct_rev(n)) %>%
add_fitted_draws(m_block_trial, re_formula = NA) %>%
ggplot(
aes(
x = t, y = .value,
colour = condition, fill = condition)) +
geom_hline(yintercept = 0.5, linetype = 2) +
stat_lineribbon(aes(y = .value), .width = c(0.90, 0.75, .50), alpha = 1/4) +
facet_wrap(. ~ n, nrow = 2) +
geom_vline(xintercept = c(96, 97), size = 1, colour = "darkgrey") +
scale_fill_brewer(name = "condition", palette = "Set2",) +
scale_color_brewer(name = "condition", palette = "Dark2") +
scale_x_continuous("trial", breaks = seq(1, 192, 24)) +
scale_y_continuous("prop. fix. hetero", breaks = seq(0, 1, 0.1)) +
coord_cartesian(ylim = c(0, 1)) +
theme_tidybayes() +
theme(
legend.justification=c(1,0),
legend.position=c(1,0),
legend.box.background = element_rect(size=1)) +
# geom_point(data = rolling_fix_prop, aes(y = prop_fix), alpha = 0.25) +
geom_path(data = rolling_fix_prop, aes(y = prop_fix), alpha = 0.33) +
ggsave("scratch/strat_over_trials.png", width = 9, height = 5)
# get_variables(m)
# m %>% gather_draws(b_trial,  `b_trial:n3`, `b_trial:n4`, `b_trial:n5`) %>%
# 	ggplot(aes(x = .value, fill = .variable)) + geom_density(alpha = 0.33)
# dat_p$p <- predict(m, dat_p)[, 1]
# ggplot(dat_p, aes(x  = trial, y = p, colour = n )) + geom_point()
source('~/Documents/ongoing projects/Deadline-Experiment/timeline_analysis/change_over_time.R', echo=TRUE)
dat_m %>%
group_by(block) %>%
modelr::data_grid(condition, n, t) %>%
# mutate(n = fct_rev(n)) %>%
add_fitted_draws(m_full, re_formula = NA) %>%
ggplot(
aes(
x = t, y = .value,
colour = condition, fill = condition)) +
geom_hline(yintercept = 0.5, linetype = 2) +
stat_lineribbon(aes(y = .value), .width = c(0.90, 0.75, .50), alpha = 1/4) +
facet_wrap(. ~ n, nrow = 2) +
geom_vline(xintercept = c(96, 97), size = 1, colour = "darkgrey") +
scale_fill_brewer(name = "condition", palette = "Set2",) +
scale_color_brewer(name = "condition", palette = "Dark2") +
scale_x_continuous("trial", breaks = seq(1, 192, 48)) +
scale_y_continuous("prop. fix. hetero", breaks = seq(0, 1, 0.1)) +
coord_cartesian(ylim = c(0, 1)) +
theme_tidybayes() +
theme(
legend.justification=c(1,0),
legend.position=c(1,0),
legend.box.background = element_rect(size=1)) +
# geom_point(data = rolling_fix_prop, aes(y = prop_fix), alpha = 0.25) +
geom_path(data = rolling_fix_prop, aes(y = prop_fix), alpha = 0.33) +
ggsave("scratch/strat_over_trials.png", width = 9, height = 5)
dat_m %>%
group_by(block) %>%
modelr::data_grid(condition, n, t)
summary(dat_m)
dat_m
source('~/Documents/ongoing projects/Deadline-Experiment/timeline_analysis/change_over_time.R', echo=TRUE)
dat_m
levels(dat_m$block)
library(brms)
library(tidyverse)
library(tidybayes)
library(RcppRoll)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# read Deadline data
deadline_dat <- as_tibble(readRDS("../data/processedFixData.Rda"))
# get Reward data
reward_dat <- as_tibble(readRDS("../../Reward-Experiment/data/processedFixData.Rda"))
reward_dat %>% mutate(fixX  = fixXflipped + 512) -> reward_dat
subjectsToRemove = c(22,19,12)#22 and 19 accuracy on homogenous trials below 50%, 12 RT on homogenous trials over 8s
deadline_dat = (deadline_dat[!(deadline_dat$subj%in% subjectsToRemove),])
deadline_dat$subj = as.factor(deadline_dat$subj)
assign_fixation_side <- function(df) {
# classify every fixation as homo (right), central, or hetero (left)
centralWidth = 64 #change to 1 visual degree
df$side = 'central'
df$side[which(df$fixX <(512-centralWidth/2))] = "hetero"
df$side[which(df$fixX >(512+centralWidth/2))] = "homo"
df$side = as.factor(df$side)
return(df)
}
deadline_dat <- assign_fixation_side(deadline_dat)
reward_dat <- assign_fixation_side(reward_dat)
deadline_dat %>%
filter(
targSide == "absent",
accuracy == 1) %>%
select(
subject = "subj",
condition = "version",
block = "completed",
t = "trial",
n = "fixNum",
side) %>%
mutate(subject = paste("d", subject, sep = "-"))-> deadline_dat
reward_dat %>%
filter(
targPresent == "absent",
accuracy == 1) %>%
select(
subject = "subj",
condition = "incentive",
block,
t = "trialNum",
n = "fixNum",
side) %>%
mutate(
subject = paste("r", subject, sep = "-"),
condition = if_else(block == "block 1", "flat", condition)) %>%
bind_rows(deadline_dat) %>%
filter(n > 1, n < 8) %>%
mutate(
n = as.factor(n),
condition = as_factor(condition),
condition = fct_recode(condition,
reward = "r", flat = "f", untimed = "U", timed = "T"),
hetero_fix = as.numeric(side == "hetero"),
block = as_factor(block),
block = fct_recode(block, "block 1" = " 1", "block 2" = " 2"),
t = if_else(block == "block 2", t + 96, t)) %>%
select(-side) -> dat_m
dat_m
library(brms)
library(tidyverse)
library(tidybayes)
library(RcppRoll)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# read Deadline data
deadline_dat <- as_tibble(readRDS("../data/processedFixData.Rda"))
# get Reward data
reward_dat <- as_tibble(readRDS("../../Reward-Experiment/data/processedFixData.Rda"))
reward_dat %>% mutate(fixX  = fixXflipped + 512) -> reward_dat
subjectsToRemove = c(22,19,12)#22 and 19 accuracy on homogenous trials below 50%, 12 RT on homogenous trials over 8s
deadline_dat = (deadline_dat[!(deadline_dat$subj%in% subjectsToRemove),])
deadline_dat$subj = as.factor(deadline_dat$subj)
assign_fixation_side <- function(df) {
# classify every fixation as homo (right), central, or hetero (left)
centralWidth = 64 #change to 1 visual degree
df$side = 'central'
df$side[which(df$fixX <(512-centralWidth/2))] = "hetero"
df$side[which(df$fixX >(512+centralWidth/2))] = "homo"
df$side = as.factor(df$side)
return(df)
}
deadline_dat <- assign_fixation_side(deadline_dat)
reward_dat <- assign_fixation_side(reward_dat)
deadline_dat %>%
filter(
targSide == "absent",
accuracy == 1) %>%
select(
subject = "subj",
condition = "version",
block = "completed",
t = "trial",
n = "fixNum",
side) %>%
mutate(subject = paste("d", subject, sep = "-"))-> deadline_dat
reward_dat %>%
filter(
targPresent == "absent",
accuracy == 1) %>%
select(
subject = "subj",
condition = "incentive",
block,
t = "trialNum",
n = "fixNum",
side) %>%
mutate(
subject = paste("r", subject, sep = "-"),
condition = if_else(block == "block 1", "flat", condition)) %>%
bind_rows(deadline_dat) %>%
filter(n > 1, n < 8) %>%
mutate(
n = as.factor(n),
condition = as_factor(condition),
condition = fct_recode(condition,
reward = "r", flat = "f", untimed = "U", timed = "T"),
hetero_fix = as.numeric(side == "hetero"),
block = as_factor(block),
block = fct_recode(block, "block 1" = " 1", "block 2" = " 2"),
t = if_else(block == "block 2", t + 96, t)) %>%
select(-side) -> dat_m
dat_m
library(brms)
library(tidyverse)
library(tidybayes)
library(RcppRoll)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# read Deadline data
deadline_dat <- as_tibble(readRDS("../data/processedFixData.Rda"))
# get Reward data
reward_dat <- as_tibble(readRDS("../../Reward-Experiment/data/processedFixData.Rda"))
reward_dat %>% mutate(fixX  = fixXflipped + 512) -> reward_dat
subjectsToRemove = c(22,19,12)#22 and 19 accuracy on homogenous trials below 50%, 12 RT on homogenous trials over 8s
deadline_dat = (deadline_dat[!(deadline_dat$subj%in% subjectsToRemove),])
deadline_dat$subj = as.factor(deadline_dat$subj)
assign_fixation_side <- function(df) {
# classify every fixation as homo (right), central, or hetero (left)
centralWidth = 64 #change to 1 visual degree
df$side = 'central'
df$side[which(df$fixX <(512-centralWidth/2))] = "hetero"
df$side[which(df$fixX >(512+centralWidth/2))] = "homo"
df$side = as.factor(df$side)
return(df)
}
deadline_dat <- assign_fixation_side(deadline_dat)
reward_dat <- assign_fixation_side(reward_dat)
deadline_dat %>%
filter(
targSide == "absent",
accuracy == 1) %>%
select(
subject = "subj",
condition = "version",
block = "completed",
t = "trial",
n = "fixNum",
side) %>%
mutate(subject = paste("d", subject, sep = "-"))-> deadline_dat
reward_dat %>%
filter(
targPresent == "absent",
accuracy == 1) %>%
select(
subject = "subj",
condition = "incentive",
block,
t = "trialNum",
n = "fixNum",
side) %>%
mutate(
subject = paste("r", subject, sep = "-")) %>%
bind_rows(deadline_dat) %>%
filter(n > 1, n < 8) %>%
mutate(
n = as.factor(n),
condition = as_factor(condition),
condition = fct_recode(condition,
reward = "r", flat = "f", untimed = "U", timed = "T"),
condition = if_else(block == "block 1", "flat", condition),
hetero_fix = as.numeric(side == "hetero"),
block = as_factor(block),
block = fct_recode(block, "block 1" = " 1", "block 2" = " 2"),
t = if_else(block == "block 2", t + 96, t)) %>%
select(-side) -> dat_m
dat_m
dat_m %>% mutate(condition = if_else(block == "block 1", "flat", ccondition)
)
dat_m %>% mutate(condition = if_else(block == "block 1", "flat", condition))
library(brms)
library(tidyverse)
library(tidybayes)
library(RcppRoll)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# read Deadline data
deadline_dat <- as_tibble(readRDS("../data/processedFixData.Rda"))
# get Reward data
reward_dat <- as_tibble(readRDS("../../Reward-Experiment/data/processedFixData.Rda"))
reward_dat %>% mutate(fixX  = fixXflipped + 512) -> reward_dat
subjectsToRemove = c(22,19,12)#22 and 19 accuracy on homogenous trials below 50%, 12 RT on homogenous trials over 8s
deadline_dat = (deadline_dat[!(deadline_dat$subj%in% subjectsToRemove),])
deadline_dat$subj = as.factor(deadline_dat$subj)
assign_fixation_side <- function(df) {
# classify every fixation as homo (right), central, or hetero (left)
centralWidth = 64 #change to 1 visual degree
df$side = 'central'
df$side[which(df$fixX <(512-centralWidth/2))] = "hetero"
df$side[which(df$fixX >(512+centralWidth/2))] = "homo"
df$side = as.factor(df$side)
return(df)
}
deadline_dat <- assign_fixation_side(deadline_dat)
reward_dat <- assign_fixation_side(reward_dat)
deadline_dat %>%
filter(
targSide == "absent",
accuracy == 1) %>%
select(
subject = "subj",
condition = "version",
block = "completed",
t = "trial",
n = "fixNum",
side) %>%
mutate(subject = paste("d", subject, sep = "-"))-> deadline_dat
reward_dat %>%
filter(
targPresent == "absent",
accuracy == 1) %>%
select(
subject = "subj",
condition = "incentive",
block,
t = "trialNum",
n = "fixNum",
side) %>%
mutate(
subject = paste("r", subject, sep = "-")) %>%
bind_rows(deadline_dat) %>%
filter(n > 1, n < 8) %>%
mutate(
n = as.factor(n),
condition = if_else(block == "block 1", "flat", condition),
condition = as_factor(condition),
condition = fct_recode(condition,
reward = "r", flat = "f", untimed = "U", timed = "T"),
hetero_fix = as.numeric(side == "hetero"),
block = as_factor(block),
block = fct_recode(block, "block 1" = " 1", "block 2" = " 2"),
t = if_else(block == "block 2", t + 96, t)) %>%
select(-side) -> dat_m
dat_m
library(brms)
library(tidyverse)
library(tidybayes)
library(RcppRoll)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# read Deadline data
deadline_dat <- as_tibble(readRDS("../data/processedFixData.Rda"))
# get Reward data
reward_dat <- as_tibble(readRDS("../../Reward-Experiment/data/processedFixData.Rda"))
reward_dat %>% mutate(fixX  = fixXflipped + 512) -> reward_dat
subjectsToRemove = c(22,19,12)#22 and 19 accuracy on homogenous trials below 50%, 12 RT on homogenous trials over 8s
deadline_dat = (deadline_dat[!(deadline_dat$subj%in% subjectsToRemove),])
deadline_dat$subj = as.factor(deadline_dat$subj)
assign_fixation_side <- function(df) {
# classify every fixation as homo (right), central, or hetero (left)
centralWidth = 64 #change to 1 visual degree
df$side = 'central'
df$side[which(df$fixX <(512-centralWidth/2))] = "hetero"
df$side[which(df$fixX >(512+centralWidth/2))] = "homo"
df$side = as.factor(df$side)
return(df)
}
deadline_dat <- assign_fixation_side(deadline_dat)
reward_dat <- assign_fixation_side(reward_dat)
deadline_dat %>%
filter(
targSide == "absent",
accuracy == 1) %>%
select(
subject = "subj",
condition = "version",
block = "completed",
t = "trial",
n = "fixNum",
side) %>%
mutate(subject = paste("d", subject, sep = "-"))-> deadline_dat
reward_dat %>%
filter(
targPresent == "absent",
accuracy == 1) %>%
select(
subject = "subj",
condition = "incentive",
block,
t = "trialNum",
n = "fixNum",
side) %>%
mutate(
subject = paste("r", subject, sep = "-")) %>%
bind_rows(deadline_dat) %>%
filter(n > 1, n < 8) %>%
mutate(
n = as.factor(n),
condition = if_else(block == " 1", "flat", condition),
condition = as_factor(condition),
condition = fct_recode(condition,
reward = "r", flat = "f", untimed = "U", timed = "T"),
hetero_fix = as.numeric(side == "hetero"),
block = as_factor(block),
block = fct_recode(block, "block 1" = " 1", "block 2" = " 2"),
t = if_else(block == "block 2", t + 96, t)) %>%
select(-side) -> dat_m
dat_m
m_full <- brm(
data = filter(dat_m, condition %in% c("flat", "reward")),
hetero_fix ~ condition * block * t * n + (n | subject),
family = "bernoulli")
m_full <- add_criterion(m_full, c("loo", "waic"))
source('~/Documents/ongoing projects/Deadline-Experiment/timeline_analysis/change_over_time.R', echo=TRUE)
summary(m_full)
d_tmp %>%
group_by(block) %>%
modelr::data_grid(condition, n, t)
d_tmp %>%
group_by(block) %>%
modelr::data_grid(condition, n, t) %>%
# mutate(n = fct_rev(n)) %>%
add_fitted_draws(m_full, re_formula = NA) %>%
ggplot(
aes(
x = t, y = .value,
colour = condition, fill = condition)) +
geom_hline(yintercept = 0.5, linetype = 2) +
stat_lineribbon(aes(y = .value), .width = c(0.90, 0.75, .50), alpha = 1/4)
d_tmp
d_tmp %>% group_by(condition) %>% summarise(mh = mean(hetero_fix))
d_tmp %>% group_by(n, condition) %>% summarise(mh = mean(hetero_fix))
d_tmp %>%
group_by(block) %>%
modelr::data_grid(condition, n, t) %>%
# mutate(n = fct_rev(n)) %>%
add_fitted_draws(m_full, re_formula = NA) %>%
ggplot(
aes(
x = t, y = .value,
colour = condition, fill = condition)) +
geom_hline(yintercept = 0.5, linetype = 2) +
stat_lineribbon(aes(y = .value), .width = c(0.90, 0.75, .50), alpha = 1/4) +
facet_wrap(. ~ n, nrow = 2)
