facet_wrap(~ targ_side) +
theme_bw() +
scale_fill_manual(values = c("#CC6677", "#117733")) +
scale_y_log10("median rt (s)", breaks = c(1,2,4,8,16))  -> p_rt
p_acc / p_rt
ggsave("exp_reward_acc_rt.png", p_acc / p_rt + plot_layout(guides = "collect"), width = 8, height = 5)
dat_rt_acc %>% filter(cd %in% c("flat", "reward")) %>%
group_by(observer, bk, cd, targ_side) %>%
summarise(accuracy = mean(acc), .groups = 'drop') %>%
ggplot(aes(x = bk, y = accuracy*100, fill = cd)) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
scale_fill_manual(values = c("#CC6677", "#117733")) + labs(fill = "condition")+
scale_y_continuous(limits = c(0, 100), name="accuracy (%)")  -> p_acc
dat_rt_acc %>% filter(cd %in% c("flat", "reward"), acc == 1) %>%
group_by(observer, bk, cd, targ_side) %>%
summarise(median_rt = median(rt), .groups = 'drop') %>%
ggplot(aes(x = bk, y = median_rt, fill = cd)) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
scale_fill_manual(values = c("#CC6677", "#117733")) + labs(fill = "condition")+
scale_y_log10("median rt (s)", breaks = c(1,2,4,8,16))  -> p_rt
p_acc / p_rt
ggsave("exp_reward_acc_rt.png", p_acc / p_rt + plot_layout(guides = "collect"), width = 8, height = 5)
p_acc / p_rt
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1,
targ_side == "absent") %>%
group_by(observer, cd, n) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') -> d_strat
d_strat
bind_rows(deadline_dat, reward_dat) %>%
mutate(condition = as_factor(condition),
condition = fct_recode(condition,
long = "U", flat = "f", brief = "T", reward = "r"),
condition = fct_relevel(condition, "long", "flat", "brief", "reward"),
hetero_fix = as.numeric(side == "hetero"),
block = as_factor(block),
block = fct_recode(block, "block 1" = " 1", "block 2" = " 2"),
t = if_else(block == "block 2", t + 96, t),
ts = (t-1)/96) %>%
select(-side) %>%
rename(cd = "condition", bk = "block") -> dat_fix_all_fix
# Read in Acc and RT data
setwd("C:/Users/Marcin/Documents/GitHub/Deadline-Experiment")
deadline_dat <- as_tibble(readRDS("C:/Users/Marcin/Documents/GitHub/Deadline-Experiment/data/processedRTandAccData.Rda"))
reward_dat <- as_tibble(readRDS("C:/Users/Marcin/Documents/GitHub/Reward-Experiment/data/processedRTandAccData.Rda"))
subjectsToRemove = c(22,19,12)#22 and 19 accuracy on homogenous trials below 50%, 12 RT on homogenous trials over 8s
reward_dat = (reward_dat[!(reward_dat$subj%in% subjectsToRemove),])
reward_dat$subj = as.factor(reward_dat$subj)
rm(subjectsToRemove)
# Tidy up a little
deadline_dat %>%
select(
observer = "subj",
condition = "version",
targ_side = "targSide",
block = "completed",
t = "trial",
rt = "RT",
acc) %>%
mutate(
block = as.factor(block),
observer = paste("d", observer, sep = "")) -> deadline_dat
reward_dat %>%
select(
observer = "subj",
condition = "incentive",
targ_side = "targSide",
block,
t = "trial",
rt = "RT",
acc) %>%
mutate(
observer = paste("r", observer, sep = "")) -> reward_dat
bind_rows(deadline_dat, reward_dat) %>%
mutate(
condition = as_factor(condition),
condition = fct_recode(condition,
reward = "r", flat = "f", long = "U", brief = "T"),
condition = fct_relevel(condition, "long", "flat", "brief", "reward"),
block = as_factor(block),
block = fct_recode(block, "block 1" = "1", "block 2" = "2"),
targ_side = fct_recode(targ_side,
heterogeneous = "hetrogeneous",
heterogeneous = "heterogenous",
homogeneous = "homogenous"),
t = as.numeric(t),
t = if_else(block == "block 2", t + 96, t)) %>%
rename(cd = "condition", bk = "block") -> dat_rt_acc
rm(deadline_dat, reward_dat)
write_csv(dat_rt_acc, "dat_acc_rt.csv")
### Read in fixation data
# read Deadline data
deadline_dat <- as_tibble(readRDS("C:/Users/Marcin/Documents/GitHub/Deadline-Experiment/data/processedFixData.Rda"))
# get Reward data
reward_dat <- as_tibble(readRDS("C:/Users/Marcin/Documents/GitHub/Reward-Experiment/data/processedFixData.Rda"))
reward_dat %>% mutate(fixX  = fixXflipped + 512) -> reward_dat
subjectsToRemove = c(22,19,12)#22 and 19 accuracy on homogenous trials below 50%, 12 RT on homogenous trials over 8s
reward_dat = (reward_dat[!(reward_dat$subj%in% subjectsToRemove),])
reward_dat$subj = as.factor(reward_dat$subj)
rm(subjectsToRemove)
assign_fixation_side <- function(df) {
# classify every fixation as homo (right), central, or hetero (left)
centralWidth = 64 #change to 1 visual degree
df$side = 'central'
df$side[which(df$fixX <(512-centralWidth/2))] = "hetero"
df$side[which(df$fixX >(512+centralWidth/2))] = "homo"
df$side = as.factor(df$side)
return(df)
}
deadline_dat <- assign_fixation_side(deadline_dat)
reward_dat <- assign_fixation_side(reward_dat)
deadline_dat %>%
select(
observer = "subj",
condition = "version",
block = "completed",
t = "trial",
n = "fixNum",
side,
duration = fixDur) %>%
mutate(observer = paste("d", observer, sep = ""))-> deadline_dat
reward_dat %>%
mutate(duration = fixOff - fixOn) %>%
select(
observer = "subj",
condition = "incentive",
block,
t = "trialNum",
n = "fixNum",
side,
duration) %>%
mutate(
observer = paste("r", observer, sep = "")) -> reward_dat
bind_rows(deadline_dat, reward_dat) %>%
filter(n < 7) %>%
mutate(
condition = as_factor(condition),
condition = fct_recode(condition,
long = "U", flat = "f", brief = "T", reward = "r"),
condition = fct_relevel(condition, "long", "flat", "brief", "reward"),
hetero_fix = as.numeric(side == "hetero"),
block = as_factor(block),
block = fct_recode(block, "block 1" = " 1", "block 2" = " 2"),
t = if_else(block == "block 2", t + 96, t),
ts = (t-1)/96) %>%
select(-side) %>%
rename(cd = "condition", bk = "block") -> dat_fix
bind_rows(deadline_dat, reward_dat) %>%
mutate(condition = as_factor(condition),
condition = fct_recode(condition,
long = "U", flat = "f", brief = "T", reward = "r"),
condition = fct_relevel(condition, "long", "flat", "brief", "reward"),
hetero_fix = as.numeric(side == "hetero"),
block = as_factor(block),
block = fct_recode(block, "block 1" = " 1", "block 2" = " 2"),
t = if_else(block == "block 2", t + 96, t),
ts = (t-1)/96) %>%
select(-side) %>%
rename(cd = "condition", bk = "block") -> dat_fix_all_fix
write_csv(dat_fix_all_fix, "dat_fix_all.csv")
dat_fix <- read_csv("dat_fix_all.csv") %>% filter(n > 1)
# import data
# source("import_and_tidy_data.R")
dat_rt_acc <- read_csv("dat_acc_rt.csv")
dat_fix <- read_csv("dat_fix.csv") %>% filter(n > 1)
dat_fix <- read_csv("dat_fix_all.csv") %>% filter(n > 1)
dat_fix <- read_csv("dat_fix_all_fix.csv") %>% filter(n > 1)
head(dat_fix_all_fix)
# set the seed, so running this file will give exactly the same numbers as in our paper (hopefully)!
set.seed(2020)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(fig.height = 4, fig.align = 'center')
library(brms)
library(tidyverse)
library(tidybayes)
library(patchwork)
library(lmerTest)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# import data
# source("import_and_tidy_data.R")
dat_rt_acc <- read_csv("dat_acc_rt.csv")
dat_fix <- read_csv("dat_fix.csv") %>% filter(n > 1)
dat_fix_all_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1,
targ_side == "absent") %>%
group_by(observer,targ_side, cd) %>%
summarise(prop_hetero = max(n), .groups = 'drop') -> summary_fin_no
summary_fix_no
dat_fix_all_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1,
targ_side == "absent") %>%
group_by(observer,targ_side, cd) %>%
summarise(prop_hetero = max(n), .groups = 'drop') -> summary_fix_no
summary_fix_no
dat_fix_all_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1,
targ_side == "absent") %>%
group_by(targ_side, cd) %>%
summarise(prop_hetero = max(n), .groups = 'drop') -> summary_fix_no
summary_fix_no
dat_fix_all_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1)%>%
group_by(targ_side, cd) %>%
summarise(prop_max = max(n), .groups = 'drop') -> summary_fix_no
dat_fix_all_fix
summary_fix_no
dat_fix_all_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1)%>%
group_by(targ_side, cd) %>%
summarise(no_fix__max = max(n), .groups = 'drop',
no_fix_mean= mean(n), .groups = 'drop') -> summary_fix_no
dat_fix_all_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1)%>%
group_by(targ_side, cd) %>%
summarise(no_fix__max = max(n), no_fix_mean= mean(n), .groups = 'drop') -> summary_fix_no
summary_fix_no
dat_fix_all_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1)%>%
group_by(targ_side, cd) %>%
summarise(no_fix__max = max(n), no_fix_mean= mean(n), .groups = 'drop')%>%
tb(order = 3) %>%
kable(format = "html", digits = 2) %>%
collapse_rows(columns = 1, valign = "top"
)
library(kableExtra)
library(magrittr)
library(magrittr)
dat_fix_all_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1)%>%
group_by(targ_side, cd) %>%
summarise(no_fix__max = max(n), no_fix_mean= mean(n), .groups = 'drop')%>%
tb(order = 3) %>%
kable(format = "html", digits = 2) %>%
collapse_rows(columns = 1, valign = "top")
dat_fix_all_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1)%>%
group_by(targ_side, cd) %>%
summarise(no_fix__max = max(n), no_fix_mean= mean(n), .groups = 'drop')%>%
knitr::kable("latex") %>% kableExtra::kable_styling()
# set the seed, so running this file will give exactly the same numbers as in our paper (hopefully)!
set.seed(2020)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(fig.height = 4, fig.align = 'center')
library(brms)
library(tidyverse)
library(tidybayes)
library(patchwork)
library(lmerTest)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# import data
# source("import_and_tidy_data.R")
dat_rt_acc <- read_csv("dat_acc_rt.csv")
dat_fix <- read_csv("dat_fix.csv") %>% filter(n > 1)
dat_rt_acc %>%
filter(cd %in% c("long", "brief")) %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by(observer, cd, targ_side) %>%
summarise(accuracy = mean(acc), .groups = 'drop') %>%
ggplot(aes(x = cd, y = accuracy, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_x_discrete("condition") +
scale_y_continuous(limits = c(0, 1)) +
theme(legend.position = "none") -> p_acc
dat_rt_acc %>%
filter(
cd %in% c("long", "brief"),
acc == 1) %>%
group_by(observer, cd, targ_side) %>%
summarise(median_rt = median(rt), .groups = 'drop') %>%
ggplot(aes(x = cd, y = median_rt, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_x_discrete("condition") +
scale_y_log10("median rt", breaks = c(1,2,4,8,16)) +
theme(legend.position = "none") -> p_rt
p_acc / p_rt
ggsave("plots/exp_deadline_acc_rt.png", p_acc / p_rt, width = 8, height = 5)
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter(
cd %in% c("long", "brief"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, cd, n) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') -> d_strat
d_strat %>%
ggplot(aes(x = n, y = prop_hetero, colour = cd)) +
geom_line() +
facet_wrap(~ observer, ncol = 3) +
theme_bw() +
ggthemes::scale_colour_ptol() +
scale_y_continuous("prop. hetero. fix.", breaks = c(0, 0.5, 1)) +
theme(legend.position = "bottom",
strip.background = element_blank(),
strip.text.x = element_blank()) -> plt_strat_obs
d_strat %>% group_by(observer, cd) %>%
summarise(strategy = mean(prop_hetero), .groups = "drop") %>%
ggplot(aes(x = cd, y = strategy, colour = fct_rev(cd), fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.3, colour = "black") +
geom_point(alpha = 0.5) +
geom_path(aes(group = observer), colour = "grey", alpha = 0.5) +
ggthemes::scale_fill_ptol() +
ggthemes::scale_color_ptol() +
scale_y_continuous("prop. hetero. fix.") +
theme_bw() +
theme(legend.position = "none") +
ggtitle("(a) Empirical") -> plt_strategy
plt_strat_obs + plt_strategy + plot_layout(widths = c(2, 1))
dat_fix %>%
left_join(
dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter(
cd %in% c("long", "brief"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, cd, t) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') %>%
mutate(
prop_hetero = if_else(prop_hetero < 0.001, 0.001, prop_hetero),
prop_hetero = if_else(prop_hetero > 0.999, 0.999, prop_hetero)) -> d_strat
plot_deadline_predictions <- function(m, title)
{
tibble(cd = c("long", "brief")) %>%
add_fitted_draws(m, re_formula = NA) %>%
ungroup() %>%
select(.draw, cd, .value) %>%
pivot_wider(names_from = cd, values_from = .value) %>%
mutate(difference = brief - long) %>%
pivot_longer(-.draw, names_to = "cd", values_to = "prop_hetero") %>%
mutate(
cd = as_factor(cd),
cd = fct_relevel(cd, "long", "difference", "brief")) %>%
ggplot(aes(x = prop_hetero, fill = cd)) +
geom_vline(xintercept = 0) +
geom_vline(xintercept = 0.5, linetype = 2) +
geom_density(alpha = 0.3) +
scale_fill_manual(values = c("#CC6677", "#555555", "#4477AA")) +
theme_bw() + theme(axis.title.y = element_blank()) +
scale_x_continuous("prop. hetero. fix.", limits = c(-0.5, 1)) +
ggtitle(title) -> plt
return(plt)
}
model_priors <- c(
prior(normal(0, 1), class = "b"))
prior_model <- brm(
data = d_strat,
prop_hetero ~ 0 + cd + (cd | observer),
family = "beta",
sample_prior = "only",
prior = model_priors,
iter = 5000,
control = list(adapt_delta = 0.95))
dat_fix_all_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1)%>%
group_by(targ_side, cd) %>%
summarise(no_fix__max = max(n), no_fix_mean= mean(n), .groups = 'drop')%>%
knitr::kable("latex") %>% kableExtra::kable_styling()
dat_fix_all_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1)%>%
group_by(targ_side, cd) %>%
summarise(no_fix__max = max(n), no_fix_mean= mean(n), .groups = 'drop')%>%
knitr::kable("latex") %>% kableExtra::kable_styling()<-table_means
dat_fix_all_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1)%>%
group_by(targ_side, cd) %>%
summarise(no_fix__max = max(n), no_fix_mean= mean(n), .groups = 'drop')%>%
knitr::kable("latex") %>% kableExtra::kable_styling()->table_means
table_means
# set the seed, so running this file will give exactly the same numbers as in our paper (hopefully)!
set.seed(2020)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(fig.height = 4, fig.align = 'center')
library(brms)
library(tidyverse)
library(tidybayes)
library(patchwork)
library(lmerTest)
dat_fix_all_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1)%>%
group_by(targ_side, cd) %>%
summarise(no_fix__max = max(n), no_fix_mean= mean(n), .groups = 'drop')%>%
knitr::kable("latex") %>% kableExtra::kable_styling()->table_means
table_means
dat_fix_all_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1)%>%
group_by(targ_side, cd) %>%
summarise(no_fix__max = max(n), no_fix_mean= mean(n), .groups = 'drop')%>%
knitr::kable("html") %>% kableExtra::kable_styling()->table_means
table4b
table_means
dat_fix_all_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter( acc == 1)%>%
group_by(targ_side, cd) %>%
summarise(max_fix_no = max(n), mean_fix_no= mean(n), .groups = 'drop')%>%
knitr::kable("html", digits= 4) %>% kableExtra::kable_styling()->table_means
table_means
dat_rt_acc %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by(observer, cd, targ_side) %>%
summarise(accuracy = mean(acc),
rt=median(RT),.groups = 'drop')
dat_rt_acc %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by(observer, cd, targ_side) %>%
summarise(accuracy = mean(acc),
rt_median=median(rt),.groups = 'drop')
dat_rt_acc %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by(observer, cd, targ_side) %>%
summarise(accuracy = mean(acc),
rt_median=median(rt),.groups = 'drop') %>%
mutate(IES=rt_median/accuracy)
dat_rt_acc %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by( cd, targ_side) %>%
summarise(accuracy = mean(acc),
rt_median=median(rt),.groups = 'drop')
dat_rt_acc %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by( cd, targ_side) %>%
summarise(accuracy = mean(acc),
rt_median=median(rt),.groups = 'drop') %>%
mutate(IES=rt_median/accuracy)
dat_rt_acc %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by( cd, targ_side) %>%
summarise(accuracy = mean(acc),
rt_median=median(rt),.groups = 'drop') %>%
mutate(IES=rt_median/accuracy)%>%
ggplot(aes(x = cd, y = IES, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_x_discrete("condition") +
scale_y_continuous(limits = c(0, 25)) +
theme(legend.position = "none") -> IES
IES
dat_rt_acc %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by( cd, targ_side,observer) %>%
summarise(accuracy = mean(acc),
rt_median=median(rt),.groups = 'drop') %>%
mutate(IES=rt_median/accuracy)%>%
ggplot(aes(x = cd, y = IES, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_x_discrete("condition") +
scale_y_continuous(limits = c(0, 25)) +
theme(legend.position = "none") -> IES
IES
ggsave("plots/inverse_efficiency_score.png", IES, width = 8, height = 5)
dat_rt_acc %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by( cd, targ_side,observer) %>%
summarise(accuracy = mean(acc),
rt_median=median(rt),.groups = 'drop') %>%
mutate(IES=rt_median/accuracy)%>%
ggplot(aes(x = cd, y = IES, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_x_discrete("condition") +
scale_y_continuous(limits = c(0, 25), name="Inverse Effciency score(RT/Prop. Correct") +
theme(legend.position = "none") -> IES
ggsave("plots/inverse_efficiency_score.png", IES, width = 8, height = 5)
dat_rt_acc %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by( cd, targ_side,observer) %>%
summarise(accuracy = mean(acc),
rt_median=median(rt),.groups = 'drop') %>%
mutate(IES=rt_median/accuracy)%>%
ggplot(aes(x = cd, y = IES, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_x_discrete("condition") +
scale_y_continuous(limits = c(0, 25), name="Inverse Effciency score(RT/Prop. Correct)") +
theme(legend.position = "none") -> IES
ggsave("plots/inverse_efficiency_score.png", IES, width = 8, height = 5)
