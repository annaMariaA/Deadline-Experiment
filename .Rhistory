allow_new_levels = TRUE) %>%
ungroup() %>%
select(observer, condition, prop_hetero = ".value") -> d_sim
return(d_sim)
}
sample_data <- function(11,1)
sample_data <- function(1,1)
sample_data(1,1)
sample_data(1,1)
power_model
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(power_model, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long)
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(sim_model, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long) %>%
summarise(mean(differece>0))
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(power_model, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long) %>%
summarise(mean(differece>0))
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(power_model, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long) %>%
summarise(mean(difference>0))
get_p_difference <- function(n_obs, n_trls) {
d_sim <- sample_data(n_obs, n_trls)
sim_model <- brm(
data = d_sim,
prop_hetero ~ 0 + condition + (condition | observer),
family = "beta",
sample_prior = "only",
prior = model_priors,
iter = 5000,
control = list(adapt_delta = 0.95))
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(sim_model, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long) %>%
summarise(prob_diff = mean(difference>0)) -> d
return(d$prob_diff)
}
rep(seq(5, 20, 5), 5)
d_pwr <- map_dfr(rep(seq(5, 20, 5), 5), get_p_difference, n_trls = 30)
d_pwr
d_pwr
d_pwr <- map_dfr(n_obs = rep(seq(5, 10, 5), 1), get_p_difference, n_trls = 30)
d_pwr <- map(n_obs = rep(seq(5, 10, 5), 1), get_p_difference, n_trls = 30)
d_pwr <- map(rep(seq(5, 10, 5), 1), get_p_difference, n_trls = 30)
d_pwr
d_pwr <- pmap(rep(seq(5, 10, 5), 1), get_p_difference, n_trls = 30)
modelr:data_grid(n_trls = rep(seq(5, 10, 5,), 1))
modelr::data_grid(n_trls = rep(seq(5, 10, 5,), 1))
d_pwr <- pmap(
, get_p_difference, n_trls = 30)
tibble(
n_obs = rep(seq(5, 10, 5), 2),
n_trls = rep(c(20, 50), each =2)
)
d_pwr <- pmap_dfr(
tibble(
n_obs = rep(seq(5, 10, 5), 2),
n_trls = rep(c(20, 50), each =2)),
get_p_difference)
d_pwr <- pmap(
tibble(
n_obs = rep(seq(5, 10, 5), 2),
n_trls = rep(c(20, 50), each =2)),
get_p_difference)
d_pwr
?tidyverse::write_csv()
?tidyverse::csv_write()
?brms::model_weights
?get_variables
?brms::get_variables
?brms::get_variables
source('~/Documents/ongoing projects/Deadline-Experiment/bayesian_analysis/import_and_tidy_data.R', echo=TRUE)
library(tidyverse)
# Read in Acc and RT data
deadline_dat <- as_tibble(readRDS("../data/processedRTandAccData.Rda"))
reward_dat <- as_tibble(readRDS("../../Reward-Experiment/data/processedRTandAccData.Rda"))
# Read in Acc and RT data
setwd("C:/Users/Marcin/Documents/GitHub/Deadline-Experiment")
deadline_dat <- as_tibble(readRDS("../data/processedRTandAccData.Rda"))
deadline_dat <- as_tibble(readRDS("/data/processedRTandAccData.Rda"))
# Read in Acc and RT data
setwd("C:/Users/Marcin/Documents/GitHub/Deadline-Experiment")
deadline_dat <- as_tibble(readRDS("/data/processedRTandAccData.Rda"))
deadline_dat <- as_tibble(readRDS(":/Users/Marcin/Documents/GitHub/Deadline-Experiment/data/processedRTandAccData.Rda"))
deadline_dat <- as_tibble(readRDS("C:/Users/Marcin/Documents/GitHub/Deadline-Experiment/data/processedRTandAccData.Rda"))
deadline_dat <- as_tibble(readRDS("C:/Users/Marcin/Documents/GitHub/Deadline-Experiment/data/processedRTandAccData.Rda"))
reward_dat <- as_tibble(readRDS("C:/Users/Marcin/Documents/GitHub/Reward-Experiment/data/processedRTandAccData.Rda"))
subjectsToRemove = c(22,19,12)#22 and 19 accuracy on homogenous trials below 50%, 12 RT on homogenous trials over 8s
reward_dat = (reward_dat[!(reward_dat$subj%in% subjectsToRemove),])
reward_dat$subj = as.factor(reward_dat$subj)
rm(subjectsToRemove)
# Tidy up a little
deadline_dat %>%
select(
observer = "subj",
condition = "version",
targ_side = "targSide",
block = "completed",
t = "trial",
rt = "RT",
acc) %>%
mutate(
block = as.factor(block),
observer = paste("d", observer, sep = "")) -> deadline_dat
reward_dat %>%
select(
observer = "subj",
condition = "incentive",
targ_side = "targSide",
block,
t = "trial",
rt = "RT",
acc) %>%
mutate(
observer = paste("r", observer, sep = "")) -> reward_dat
bind_rows(deadline_dat, reward_dat) %>%
mutate(
condition = as_factor(condition),
condition = fct_recode(condition,
reward = "r", flat = "f", long = "U", brief = "T"),
condition = fct_relevel(condition, "long", "flat", "brief", "reward"),
block = as_factor(block),
block = fct_recode(block, "block 1" = "1", "block 2" = "2"),
targ_side = fct_recode(targ_side,
heterogeneous = "hetrogeneous",
heterogeneous = "heterogenous",
homogeneous = "homogenous"),
t = as.numeric(t),
t = if_else(block == "block 2", t + 96, t)) %>%
rename(cd = "condition", bk = "block") -> dat_rt_acc
rm(deadline_dat, reward_dat)
write_csv(dat_rt_acc, "dat_acc_rt.csv")
### Read in fixation data
# read Deadline data
deadline_dat <- as_tibble(readRDS("../data/processedFixData.Rda"))
### Read in fixation data
# read Deadline data
deadline_dat <- as_tibble(readRDS("C:/Users/Marcin/Documents/GitHub/Deadline-Experiment/data/processedFixData.Rda"))
# get Reward data
reward_dat <- as_tibble(readRDS("C:/Users/Marcin/Documents/GitHub/Reward-Experiment/data/processedFixData.Rda"))
reward_dat %>% mutate(fixX  = fixXflipped + 512) -> reward_dat
subjectsToRemove = c(22,19,12)#22 and 19 accuracy on homogenous trials below 50%, 12 RT on homogenous trials over 8s
reward_dat = (reward_dat[!(reward_dat$subj%in% subjectsToRemove),])
reward_dat$subj = as.factor(reward_dat$subj)
rm(subjectsToRemove)
assign_fixation_side <- function(df) {
# classify every fixation as homo (right), central, or hetero (left)
centralWidth = 64 #change to 1 visual degree
df$side = 'central'
df$side[which(df$fixX <(512-centralWidth/2))] = "hetero"
df$side[which(df$fixX >(512+centralWidth/2))] = "homo"
df$side = as.factor(df$side)
return(df)
}
deadline_dat <- assign_fixation_side(deadline_dat)
reward_dat <- assign_fixation_side(reward_dat)
deadline_dat %>%
select(
observer = "subj",
condition = "version",
block = "completed",
t = "trial",
n = "fixNum",
side) %>%
mutate(observer = paste("d", observer, sep = ""))-> deadline_dat
reward_dat %>%
select(
observer = "subj",
condition = "incentive",
block,
t = "trialNum",
n = "fixNum",
side) %>%
mutate(
observer = paste("r", observer, sep = "")) -> reward_dat
bind_rows(deadline_dat, reward_dat) %>%
filter(n > 1, n < 7) %>%
mutate(
condition = as_factor(condition),
condition = fct_recode(condition,
long = "U", flat = "f", brief = "T", reward = "r"),
condition = fct_relevel(condition, "long", "flat", "brief", "reward"),
hetero_fix = as.numeric(side == "hetero"),
block = as_factor(block),
block = fct_recode(block, "block 1" = " 1", "block 2" = " 2"),
t = if_else(block == "block 2", t + 96, t),
ts = (t-1)/96) %>%
select(-side) %>%
rename(cd = "condition", bk = "block") -> dat_fix
rm(reward_dat, deadline_dat)
write_csv(dat_fix, "dat_fix.csv")
# set the seed, so running this file will give exactly the same numbers as in our paper (hopefully)!
set.seed(2020)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(fig.height = 4, fig.align = 'center')
library(brms)
library(brms)
library(tidyverse)
library(tidybayes)
library(patchwork)
library(lmerTest)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# import data
# source("import_and_tidy_data.R")
dat_rt_acc <- read_csv("dat_acc_rt.csv")
dat_fix <- read_csv("dat_fix.csv")
dat_rt_acc %>%
filter(cd %in% c("long", "brief")) %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by(observer, cd, targ_side) %>%
summarise(accuracy = mean(acc), .groups = 'drop') %>%
ggplot(aes(x = cd, y = accuracy, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_y_continuous(limits = c(0, 1)) +
theme(legend.position = "none") -> p_acc
dat_rt_acc %>%
filter(
cd %in% c("long", "brief"),
acc == 1) %>%
group_by(observer, cd, targ_side) %>%
summarise(median_rt = median(rt), .groups = 'drop') %>%
ggplot(aes(x = cd, y = median_rt, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_y_log10("median rt", breaks = c(1,2,4,8,16)) +
theme(legend.position = "none") -> p_rt
p_acc / p_rt
ggsave("plots/exp_deadline_acc_rt.png", p_acc / p_rt, width = 8, height = 5)
p_acc / p_rt
dat_rt_acc %>%
filter(cd %in% c("long", "brief")) %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by(observer, cd, targ_side) %>%
summarise(accuracy = mean(acc), .groups = 'drop') %>%
ggplot(aes(x = cd, y = accuracy*100, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
scale_y_continuous(name="accuracy(%)")+
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_y_continuous(limits = c(0, 1)) +
theme(legend.position = "none") -> p_acc
dat_rt_acc %>%
filter(cd %in% c("long", "brief")) %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by(observer, cd, targ_side) %>%
summarise(accuracy = mean(acc), .groups = 'drop') %>%
ggplot(aes(x = cd, y = accuracy*100, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_y_continuous(limits = c(0, 1), name="accuracy(%)") +
theme(legend.position = "none") -> p_acc
dat_rt_acc %>%
filter(
cd %in% c("long", "brief"),
acc == 1) %>%
group_by(observer, cd, targ_side) %>%
summarise(median_rt = median(rt), .groups = 'drop') %>%
ggplot(aes(x = cd, y = median_rt, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_y_log10("median rt (s)", breaks = c(1,2,4,8,16)) +
theme(legend.position = "none") -> p_rt
p_acc / p_rt
ggsave("plots/exp_deadline_acc_rt.png", p_acc / p_rt, width = 8, height = 5)
cd()
gsave("exp_deadline_acc_rt.png", p_acc / p_rt, width = 8, height = 5)
ggsave("exp_deadline_acc_rt.png", p_acc / p_rt, width = 8, height = 5)
dat_rt_acc %>%
filter(cd %in% c("long", "brief")) %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by(observer, cd, targ_side) %>%
summarise(accuracy = mean(acc), .groups = 'drop') %>%
ggplot(aes(x = cd, y = accuracy*100, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_y_continuous(limits = c(0, 100), name="accuracy(%)") +
theme(legend.position = "none") -> p_acc
dat_rt_acc %>%
filter(
cd %in% c("long", "brief"),
acc == 1) %>%
group_by(observer, cd, targ_side) %>%
summarise(median_rt = median(rt), .groups = 'drop') %>%
ggplot(aes(x = cd, y = median_rt, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_y_log10("median rt (s)", breaks = c(1,2,4,8,16)) +
theme(legend.position = "none") -> p_rt
p_acc / p_rt
ggsave("plots/exp_deadline_acc_rt.png", p_acc / p_rt, width = 8, height = 5)
ggsave("exp_deadline_acc_rt.png", p_acc / p_rt, width = 8, height = 5)
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter(
cd %in% c("long", "brief"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, cd, n) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') -> d_strat
head(dat_fix)
head(d_strat)
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter(
cd %in% c("long", "brief"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, cd) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') -> d_strat
head(d_strat)
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter(
cd %in% c("long"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, cd) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') -> d_strat
d_strat
dat_rt_acc %>%
filter(
cd %in% c("long"),
acc == 1,
targ_side=="homogenous") %>%
group_by(observer, cd, targ_side) %>%
summarise(median_rt = median(rt), .groups = 'drop') -> rt_homogenous
rt_homogenous
head(Rtangle())
head(rt_homogenous)
dat_rt_acc %>%
filter(
cd %in% c("long"),
acc == 1,
targ_side=="homogenous") %>%
group_by(observer) %>%
summarise(median_rt = median(rt), .groups = 'drop') -> rt_homogenous
rt_homogenous
dat_rt_acc %>%
filter(
cd %in% c("long"),
acc == 1,
targ_side=="homogenous") %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by(observer) %>%
summarise(median_rt = median(rt), .groups = 'drop') -> rt_homogenous
dat_rt_acc %>%
filter(
cd %in% c("long"),
acc == 1,
targ_side=="absent") %>%
group_by(observer) %>%
summarise(median_rt = median(rt), .groups = 'drop') -> rt_homogenous
head(rt_homogenous)
cor_strat_hom_RT <- cor.test(d_start$prop_hetro, rt_homogenous$median_rt)
cor_strat_hom_RT <- cor.test(d_strat$prop_hetro, rt_homogenous$median_rt)
head(d_strat)
d_strat
rt_homogenous
cor_strat_hom_RT <- cor.test(d_strat$prop_hetro, rt_homogenous$median_rt)
cor_strat_hom_RT <- cor.test(d_strat$prop_hetero, rt_homogenous$median_rt)
cor_strat_hom_RT
head(dat_rt_acc)
levels(dat_rt_acc$targ_side)
dat_rt_acc %>%
filter(
cd %in% c("long"),
acc == 1,
targ_side=="homogeneous") %>%
group_by(observer) %>%
summarise(median_rt = median(rt), .groups = 'drop') -> rt_homogeneous
dat_rt_acc %>%
filter(
cd %in% c("long"),
acc == 1,
targ_side=="homogeneous") %>%
group_by(observer) %>%
summarise(median_rt = median(rt), .groups = 'drop') -> rt_homogeneous
cor_strat_hom_RT <- cor.test(d_strat$prop_hetero, rt_homogeneous$median_rt)
cor_strat_hom_RT
dat_rt_acc %>%
filter(
cd %in% c("long"),
acc == 1,
targ_side=="heterogeneous") %>%
group_by(observer) %>%
summarise(median_rt = median(rt), .groups = 'drop') -> rt_heterogeneous
cor_strat_het_RT <- cor.test(d_strat$prop_hetero, rt_heterogeneous$median_rt)
cor_strat_het_RT
cor_strat_abs_RT <- cor.test(d_strat$prop_hetero, rt_absent$median_rt)
dat_rt_acc %>%
filter(
cd %in% c("long"),
acc == 1,
targ_side=="absent") %>%
group_by(observer) %>%
summarise(median_rt = median(rt), .groups = 'drop') -> rt_absent
cor_strat_abs_RT <- cor.test(d_strat$prop_hetero, rt_absent$median_rt)
cor_strat_abs_RT
cor_strat_hom_RT <- cor.test(d_strat$prop_hetero, rt_homogeneous$median_rt)
cor_strat_hom_RT
cor_strat_het_RT <- cor.test(d_strat$prop_hetero, rt_heterogeneous$median_rt)
cor_strat_het_RT
cor_strat_abs_RT <- cor.test(d_strat$prop_hetero, rt_absent$median_rt)
cor_strat_abs_RT
#strategy in the long condition only, target absent trials
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter(
cd %in% c("flat"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, cd) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') -> d_strat_f
dat_rt_acc %>%
filter(
cd %in% c("flat"),
acc == 1,
targ_side=="absent") %>%
group_by(observer) %>%
summarise(median_rt = median(rt), .groups = 'drop') -> rt_absent_f
dat_rt_acc %>%
filter(
cd %in% c("flat"),
acc == 1,
targ_side=="homogeneous") %>%
group_by(observer) %>%
summarise(median_rt = median(rt), .groups = 'drop') -> rt_homogeneous_f
dat_rt_acc %>%
filter(
cd %in% c("flat"),
acc == 1,
targ_side=="heterogeneous") %>%
group_by(observer) %>%
summarise(median_rt = median(rt), .groups = 'drop') -> rt_heterogeneous_f
cor_strat_abs_RT_f <- cor.test(d_strat_f$prop_hetero, rt_absent_f$median_rt)
cor_strat_hom_RT_f <- cor.test(d_strat_f$prop_hetero, rt_homogeneous_f$median_rt)
cor_strat_het_RT_f <- cor.test(d_strat_f$prop_hetero, rt_heterogeneous_f$median_rt)
cor_strat_abs_RT_f
cor_strat_hom_RT_f <- cor.test(d_strat_f$prop_hetero, rt_homogeneous_f$median_rt)
cor_strat_hom_RT_f
cor_strat_het_RT_f <- cor.test(d_strat_f$prop_hetero, rt_heterogeneous_f$median_rt)
cor_strat_het_RT_f
#strategy in the reward condition only, target absent trials
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter(
cd %in% c("reward"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, cd) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') -> d_strat_r
dat_rt_acc %>%
filter(
cd %in% c("reward"),
acc == 1,
targ_side=="absent") %>%
group_by(observer) %>%
summarise(median_rt = median(rt), .groups = 'drop') -> rt_absent_r
dat_rt_acc %>%
filter(
cd %in% c("reward"),
acc == 1,
targ_side=="homogeneous") %>%
group_by(observer) %>%
summarise(median_rt = median(rt), .groups = 'drop') -> rt_homogeneous_r
dat_rt_acc %>%
filter(
cd %in% c("reward"),
acc == 1,
targ_side=="heterogeneous") %>%
group_by(observer) %>%
summarise(median_rt = median(rt), .groups = 'drop') -> rt_heterogeneous_r
cor_strat_abs_RT_r <- cor.test(d_strat_r$prop_hetero, rt_absent_r$median_rt)
cor_strat_hom_RT_r <- cor.test(d_strat_r$prop_hetero, rt_homogeneous_r$median_rt)
cor_strat_het_RT_r <- cor.test(d_strat_r$prop_hetero, rt_heterogeneous_r$median_rt)
cor_strat_abs_RT_r
cor_strat_hom_RT_r
cor_strat_het_RT_r
