mutate(
condition = as_factor(condition),
condition = fct_recode(condition,
reward = "r", flat = "f", long = "U", brief = "T"),
condition = fct_relevel(condition, "long", "flat", "brief", "reward"),
block = as_factor(block),
block = fct_recode(block, "block 1" = "1", "block 2" = "2"),
targ_side = fct_recode(targ_side,
heterogeneous = "hetrogeneous",
heterogeneous = "heterogenous",
homogeneous = "homogenous"),
t = as.numeric(t),
t = if_else(block == "block 2", t + 96, t)) %>%
rename(cd = "condition", bk = "block") -> dat_rt_acc
rm(deadline_dat, reward_dat)
write_csv(dat_rt_acc, "dat_acc_rt.csv")
### Read in fixation data
# read Deadline data
deadline_dat <- as_tibble(readRDS("../data/processedFixData.Rda"))
# get Reward data
reward_dat <- as_tibble(readRDS("../../Reward-Experiment/data/processedFixData.Rda"))
reward_dat %>% mutate(fixX  = fixXflipped + 512) -> reward_dat
subjectsToRemove = c(22,19,12)#22 and 19 accuracy on homogenous trials below 50%, 12 RT on homogenous trials over 8s
reward_dat = (reward_dat[!(reward_dat$subj%in% subjectsToRemove),])
reward_dat$subj = as.factor(reward_dat$subj)
rm(subjectsToRemove)
assign_fixation_side <- function(df) {
# classify every fixation as homo (right), central, or hetero (left)
centralWidth = 64 #change to 1 visual degree
df$side = 'central'
df$side[which(df$fixX <(512-centralWidth/2))] = "hetero"
df$side[which(df$fixX >(512+centralWidth/2))] = "homo"
df$side = as.factor(df$side)
return(df)
}
deadline_dat <- assign_fixation_side(deadline_dat)
reward_dat <- assign_fixation_side(reward_dat)
deadline_dat %>%
select(
observer = "subj",
condition = "version",
block = "completed",
t = "trial",
n = "fixNum",
side,
duaration = fixDur) %>%
mutate(observer = paste("d", observer, sep = ""))-> deadline_dat
reward_dat %>%
mutate(duration = fixOff - fixOn) %>%
select(
observer = "subj",
condition = "incentive",
block,
t = "trialNum",
n = "fixNum",
side,
duration) %>%
mutate(
observer = paste("r", observer, sep = "")) -> reward_dat
deadline_dat
reward_dat
bind_rows(deadline_dat, reward_dat) %>%
filter(n < 7) %>%
mutate(
condition = as_factor(condition),
condition = fct_recode(condition,
long = "U", flat = "f", brief = "T", reward = "r"),
condition = fct_relevel(condition, "long", "flat", "brief", "reward"),
hetero_fix = as.numeric(side == "hetero"),
block = as_factor(block),
block = fct_recode(block, "block 1" = " 1", "block 2" = " 2"),
t = if_else(block == "block 2", t + 96, t),
ts = (t-1)/96) %>%
select(-side) %>%
rename(cd = "condition", bk = "block") -> dat_fix
dat_fix
bind_rows(deadline_dat, reward_dat)
source('~/GitHub/Deadline-Experiment/bayesian_analysis/import_and_tidy_data.R', echo=TRUE)
fix_dat
dat_fix
source('~/.active-rstudio-document', echo=TRUE)
dat_fix
d_sacc1 <- filter(dat_fix, n == 1)
d_fix2 <- filter(dat_fix, n== 2)
d_fix2
d_sacc1 <- filter(dat_fix, n == 1) %>%
select(-n, hetero_fix, ts)
d_fix2 <- filter(dat_fix, n== 2) %>%
select(-n, -duration)
d_init_sacc <- fUll_join(d_sacc1, d_fix2)
source('~/GitHub/Deadline-Experiment/bayesian_analysis/first_sacc.R', echo=TRUE)
?full_join
library(tidyverse)
d_init_sacc <- fUll_join(d_sacc1, d_fix2)
source('~/GitHub/Deadline-Experiment/bayesian_analysis/first_sacc.R', echo=TRUE)
?fUll_join
?full_join
d_init_sacc <- full_join(d_sacc1, d_fix2)
source('~/GitHub/Deadline-Experiment/bayesian_analysis/first_sacc.R', echo=TRUE)
d_init_sacc
d_fix1
d_fix2
d_sacc1
d_sacc1 <- filter(dat_fix, n == 1) %>%
select(-n, -hetero_fix, -ts)
d_fix2 <- filter(dat_fix, n== 2) %>%
select(-n, -duration, -ts)
d_init_sacc <- full_join(d_sacc1, d_fix2)
d_init_sacc
summary(d_init_sacc)
d_init_sacc <- full_join(d_sacc1, d_fix2) %>%
filter(is.finite(hetero_fix))
summary(d_init_sacc)
ggplot(d_init_sacc, x = duration) + geom_density()
ggplot(d_init_sacc, aes(x = duration)) + geom_density()
ggplot(d_init_sacc, aes(x = duration)) + geom_histogram()
ggplot(d_init_sacc, aes(x = duration)) + geom_histogram(bins = 50)
d_init_sacc %>% ggplot(aes(x= duration, fill = hetero_fix)) + geom_histogram(bins = 50)
d_init_sacc %>% ggplot(aes(x = duration, fill = hetero_fix)) + geom_histogram(bins = 50)
d_init_sacc %>% ggplot(aes(x = duration, colourl = hetero_fix)) + geom_histogram(bins = 50)
d_init_sacc %>% ggplot(aes(x = duration, colour = hetero_fix)) + geom_histogram(bins = 50)
d_init_sacc <- full_join(d_sacc1, d_fix2) %>%
filter(is.finite(hetero_fix))
d_init_sacc %>% ggplot(aes(x = duration, colour = hetero_fix)) + geom_histogram(bins = 50)
d_init_sacc %>% ggplot(aes(x = duration, colour = hetero_fix)) + geom_histogram(bins = 50)
d_init_sacc <- full_join(d_sacc1, d_fix2) %>%
filter(is.finite(hetero_fix)) %>%
mutate(saccade_to = if_else(hetero_fix == 1, "heterogeneous", "homogeneous"))
d_init_sacc %>% ggplot(aes(x = duration, colour = saccade_to)) + geom_histogram(bins = 50)
d_init_sacc %>% ggplot(aes(x = duration, fill = saccade_to)) + geom_histogram(bins = 50)
filter(d_init_sacc, duration < 200)
summary(filter(d_init_sacc, duration < 200))
d_init_sacc %>% ggplot(aes(x = duration, fill = saccade_to)) + geom_histogram(bins = 50) + facet_wrap(~cd)
d_init_sacc <- full_join(d_sacc1, d_fix2) %>%
filter(is.finite(hetero_fix)) %>%
mutate(
saccade_to = if_else(hetero_fix == 1, "heterogeneous", "homogeneous"),
observer = as_factor(observer))
summary(filter(d_init_sacc, duration < 200))
source('~/github/Deadline-Experiment/bayesian_analysis/first_sacc.R', echo=TRUE)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# import data
# source("import_and_tidy_data.R")
dat_rt_acc <- read_csv("dat_acc_rt.csv")
dat_fix <- read_csv("dat_fix.csv")
d_sacc1 <- filter(dat_fix, n == 1) %>%
select(-n, -hetero_fix, -ts)
d_sacc1
d_fix2 <- filter(dat_fix, n== 2) %>%
select(-n, -duration, -ts)
d_init_sacc <- full_join(d_sacc1, d_fix2) %>%
filter(is.finite(hetero_fix)) %>%
mutate(
saccade_to = if_else(hetero_fix == 1, "heterogeneous", "homogeneous"),
observer = as_factor(observer))
d_init_sacc
d_init_sacc %>% ggplot(aes(x = duration, fill = saccade_to)) + geom_histogram(bins = 50) + facet_wrap(~cd)
# let's just look ate median fixation duration
d_init_sacc %>% group_by(observer, saccade_to, cd) %>%
summarise(median_duration = median(duration)) %>%
ggplot(aes(x = duration, fill = saccade_to)) + geom_boxplot() + facet_wrap(~cd)
# let's just look ate median fixation duration
d_init_sacc %>% group_by(observer, saccade_to, cd) %>%
summarise(median_duration = median(duration)) %>%
ggplot(aes(y = median_duration, fill = saccade_to)) + geom_boxplot() + facet_wrap(~cd)
d_init_sacc %>% group_by(observer, saccade_to, cd) %>%
summarise(median_duration = median(duration))
d_init_sacc %>% group_by(observer, saccade_to, cd) %>%
summarise(median_duration = median(duration)) %>%
group_by(cd, saccade_to) %>%
summarise(mean_med_dur = mean(median_duration))
d_init_sacc %>% filter(observer != "d2") %>%
group_by(observer, saccade_to, cd) %>%
summarise(median_duration = median(duration)) %>%
group_by(cd, saccade_to) %>%
summarise(mean_med_dur = mean(median_duration))
# set the seed, so running this file will give exactly the same numbers as in our paper (hopefully)!
set.seed(2020)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(fig.height = 4, fig.align = 'center')
library(brms)
library(tidyverse)
library(tidybayes)
library(patchwork)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# import data
# source("import_and_tidy_data.R")
dat_rt_acc <- read_csv("dat_acc_rt.csv")
dat_fix <- read_csv("dat_fix.csv")
d_sacc1 <- filter(dat_fix, n == 1) %>%
select(-n, -hetero_fix, -ts)
d_fix2 <- filter(dat_fix, n== 2) %>%
select(-n, -duration, -ts)
d_init_sacc <- full_join(d_sacc1, d_fix2) %>%
filter(is.finite(hetero_fix)) %>%
mutate(
saccade_to = if_else(hetero_fix == 1, "heterogeneous", "homogeneous"),
observer = as_factor(observer))
d_init_sacc %>% ggplot(aes(x= duration, fill = saccade_to)) + geom_density() =facet_wrap(~cd)
d_init_sacc %>% ggplot(aes(x= duration, fill = saccade_to)) + geom_density() =facet_wrap(~cd)
d_init_sacc <- full_join(d_sacc1, d_fix2) %>%
filter(is.finite(hetero_fix)) %>%
mutate(
saccade_to = if_else(hetero_fix == 1, "heterogeneous", "homogeneous"),
observer = as_factor(observer))
d_init_sacc %>% ggplot(aes(x= duration, fill = saccade_to)) + geom_density() =facet_wrap(~cd)
d_init_sacc %>% ggplot(aes(x= duration, fill = saccade_to)) + geom_density()  + facet_wrap(~cd)
d_init_sacc %>% ggplot(aes(x= duration, fill = saccade_to)) + geom_density(alpha = 0.5)  + facet_wrap(~cd)
d_init_sacc %>% ggplot(aes(x= duration, fill = saccade_to)) + geom_density(alpha = 0.5)  + facet_grid(observer~cd)
d_init_sacc %>% filter(observer == "d2")
d_init_sacc %>% group_by(observer, saccade_to, cd) %>%
summarise(median_duration = median(duration))
d_init_sacc %>% group_by(observer, saccade_to, cd) %>%
summarise(median_duration = median(duration)) %>% filter(median_duration>1000)
d_init_sacc %>% group_by(observer) %>%
summarise(median_duration = median(duration)) %>% filter(median_duration>1000)
d_init_sacc %>% group_by(observer) %>%
summarise(median_duration = median(duration)) %>% filter(median_duration>900)
d_init_sacc %>% group_by(observer) %>%
summarise(median_duration = median(duration)) %>% filter(median_duration>500)
d_init_sacc %>% group_by(observer) %>%
summarise(median_duration = median(duration)) %>% filter(median_duration>800)
source('~/github/Deadline-Experiment/bayesian_analysis/first_sacc.R', echo=TRUE)
d_init_sacc %>% filter(observer != "d2") %>%
group_by(observer, saccade_to, cd) %>%
summarise(median_duration = median(duration)) %>%
group_by(cd, saccade_to) %>%
summarise(mean_med_dur = mean(median_duration))
log(0)
inv_logit_scaled((0.1))
inv_logit_scaled((0.7))
inv_logit((0.7))
logit_scaled(0.1)
inv.logit(0.1)
boot::inv.logit(0.1)
boot::inv.logit(0.7)
---
title: "Supplementary Materials: Search strategies improve with practice, but not with time pressure or financial incentives"
author: "ADF Clarke"
date: "30/06/2020"
output:
bookdown::pdf_book:
theme: journal
toc: true
---
```{r setup, include=FALSE}
# set the seed, so running this file will give exactly the same numbers as in our paper (hopefully)!
set.seed(2020)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(fig.height = 4, fig.align = 'center')
library(brms)
library(tidyverse)
library(tidybayes)
library(patchwork)
library(lmerTest)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# import data
# source("import_and_tidy_data.R")
dat_rt_acc <- read_csv("dat_acc_rt.csv")
dat_fix <- read_csv("dat_fix.csv") %>% filter(n > 1)
dat_fix
summary(dat$fix )
summary(dat_fix )
dat_fix <- read_csv("dat_fix.csv")
summary(dat_fix )
readRDS("data/processedFixData.Rda")
readRDS("../data/processedFixData.Rda")
as.tibble(readRDS("../data/processedFixData.Rda"))
summary(as.tibble(readRDS("../data/processedFixData.Rda")))
setwd("~/github/Deadline-Experiment/bayesian_analysis")
source('~/github/Deadline-Experiment/bayesian_analysis/import_and_tidy_data.R', echo=TRUE)
# Read in Acc and RT data
# setwd("C:/Users/Marcin/Documents/GitHub/Deadline-Experiment")
deadline_dat <- as_tibble(readRDS("../data/processedRTandAccData.Rda"))
reward_dat <- as_tibble(readRDS("../data/processedRTandAccData.Rda"))
source('~/github/Deadline-Experiment/bayesian_analysis/import_and_tidy_data.R', echo=TRUE)
reward_dat
reward_dat = (reward_dat[!(reward_dat$subj%in% subjectsToRemove),])
# Read in Acc and RT data
# setwd("C:/Users/Marcin/Documents/GitHub/Deadline-Experiment")
deadline_dat <- as_tibble(readRDS("../data/processedRTandAccData.Rda"))
reward_dat <- as_tibble(readRDS("../data/processedRTandAccData.Rda"))
subjectsToRemove = c(22,19,12)#22 and 19 accuracy on homogenous trials below 50%, 12 RT on homogenous trials over 8s
reward_dat = (reward_dat[!(reward_dat$subj%in% subjectsToRemove),])
reward_dat$subj = as.factor(reward_dat$subj)
rm(subjectsToRemove)
# Tidy up a little
deadline_dat %>%
select(
observer = "subj",
condition = "version",
targ_side = "targSide",
block = "completed",
t = "trial",
rt = "RT",
acc) %>%
mutate(
block = as.factor(block),
observer = paste("d", observer, sep = "")) -> deadline_dat
reward_dat %>%
select(
observer = "subj",
condition = "incentive",
targ_side = "targSide",
block,
t = "trial",
rt = "RT",
acc) %>%
mutate(
observer = paste("r", observer, sep = "")) -> reward_dat
# set the seed, so running this file will give exactly the same numbers as in our paper (hopefully)!
set.seed(2020)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(fig.height = 4, fig.align = 'center')
library(brms)
library(tidyverse)
library(tidybayes)
library(patchwork)
library(lmerTest)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# import data
# source("import_and_tidy_data.R")
dat_rt_acc <- read_csv("dat_acc_rt.csv")
dat_fix <- read_csv("dat_fix.csv") %>% filter(n > 1)
dat_rt_acc %>%
filter(cd %in% c("long", "brief")) %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by(observer, cd, targ_side) %>%
summarise(accuracy = mean(acc), .groups = 'drop') %>%
ggplot(aes(x = cd, y = accuracy, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_x_discrete("condition") +
scale_y_continuous(limits = c(0, 1)) +
theme(legend.position = "none") -> p_acc
dat_rt_acc %>%
filter(
cd %in% c("long", "brief"),
acc == 1) %>%
group_by(observer, cd, targ_side) %>%
summarise(median_rt = median(rt), .groups = 'drop') %>%
ggplot(aes(x = cd, y = median_rt, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_x_discrete("condition") +
scale_y_log10("median rt", breaks = c(1,2,4,8,16)) +
theme(legend.position = "none") -> p_rt
p_acc / p_rt
ggsave("plots/exp_deadline_acc_rt.png", p_acc / p_rt, width = 8, height = 5)
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter(
cd %in% c("long", "brief"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, cd, n) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') -> d_strat
d_strat %>%
ggplot(aes(x = n, y = prop_hetero, colour = cd)) +
geom_line() +
facet_wrap(~ observer, ncol = 3) +
theme_bw() +
ggthemes::scale_colour_ptol() +
scale_y_continuous("prop. hetero. fix.", breaks = c(0, 0.5, 1)) +
theme(legend.position = "bottom",
strip.background = element_blank(),
strip.text.x = element_blank()) -> plt_strat_obs
d_strat %>% group_by(observer, cd) %>%
summarise(strategy = mean(prop_hetero), .groups = "drop") %>%
ggplot(aes(x = cd, y = strategy, colour = fct_rev(cd), fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.3, colour = "black") +
geom_point(alpha = 0.5) +
geom_path(aes(group = observer), colour = "grey", alpha = 0.5) +
ggthemes::scale_fill_ptol() +
ggthemes::scale_color_ptol() +
scale_y_continuous("prop. hetero. fix.") +
theme_bw() +
theme(legend.position = "none") +
ggtitle("(a) Empirical") -> plt_strategy
plt_strat_obs + plt_strategy + plot_layout(widths = c(2, 1))
dat_fix %>%
left_join(
dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter(
cd %in% c("long", "brief"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, cd, t) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') %>%
mutate(
prop_hetero = if_else(prop_hetero < 0.001, 0.001, prop_hetero),
prop_hetero = if_else(prop_hetero > 0.999, 0.999, prop_hetero)) -> d_strat
plot_deadline_predictions <- function(m, title)
{
tibble(cd = c("long", "brief")) %>%
add_fitted_draws(m, re_formula = NA) %>%
ungroup() %>%
select(.draw, cd, .value) %>%
pivot_wider(names_from = cd, values_from = .value) %>%
mutate(difference = brief - long) %>%
pivot_longer(-.draw, names_to = "cd", values_to = "prop_hetero") %>%
mutate(
cd = as_factor(cd),
cd = fct_relevel(cd, "long", "difference", "brief")) %>%
ggplot(aes(x = prop_hetero, fill = cd)) +
geom_vline(xintercept = 0) +
geom_vline(xintercept = 0.5, linetype = 2) +
geom_density(alpha = 0.3) +
scale_fill_manual(values = c("#CC6677", "#555555", "#4477AA")) +
theme_bw() + theme(axis.title.y = element_blank()) +
scale_x_continuous("prop. hetero. fix.", limits = c(-0.5, 1)) +
ggtitle(title) -> plt
return(plt)
}
model_priors <- c(
prior(normal(0, 1), class = "b"))
prior_model <- brm(
data = d_strat,
prop_hetero ~ 0 + cd + (cd | observer),
family = "beta",
sample_prior = "only",
prior = model_priors,
iter = 5000,
control = list(adapt_delta = 0.95))
plt_prior <- plot_deadline_predictions(prior_model, "(b) Prior")
plt_prior
power_prior <- c(
prior(normal(0.1, 0.25), class = "b", coef = "cdlong"),
prior(normal(0.7, 0.25), class = "b", coef = "cdbrief"),
prior(student_t(3, 0, 2), class = "sd"),
prior(gamma(1, 10), class = "phi")
)
power_model <- brm(
data = d_strat,
prop_hetero ~ 0 + cd + (cd | observer),
family = "beta",
sample_prior = "only",
prior = power_prior,
iter = 5000,
control = list(adapt_delta = 0.95),
refresh = 0)
# a function to generate a simlulated dataset.
sample_data <- function(n_obs, n_trl)
{
d_strat %>%
modelr::data_grid(
cd = c("long", "brief"),
observer = 1:n_obs) %>%
add_fitted_draws(
power_model,
n = n_trl,
re_formula = NULL,
scale = "response",
sample_new_levels = "gaussian",
allow_new_levels = TRUE) %>%
ungroup() %>%
select(observer, cd, prop_hetero = ".value") %>%
mutate(
prop_hetero = if_else(prop_hetero < 0.0001, 0.0001, prop_hetero),
prop_hetero = if_else(prop_hetero > 0.9999, 0.9999, prop_hetero)) -> d_sim
return(d_sim)
}
plt_power <- plot_deadline_predictions(power_model, "Power Predictions")
plt_power
sample_data(15, 32) %>%
group_by(cd) %>%
summarise(`mean prop. fix hetero.` = mean(prop_hetero), .groups = "drop") %>%
knitr::kable()
# a function that will the key statistic that we are interested in:
# the probability, given the data, that observers were more strategic in the brief condition than the long.
get_p_difference <- function(n_obs, n_trls) {
# simulate some data
d_sim <- sample_data(n_obs, n_trls)
# fit model to simulated data
sim_model <- brm(
data = d_sim,
prop_hetero ~ 0 + cd + (cd | observer),
family = "beta",
prior = model_priors,
iter = 5000,
control = list(adapt_delta = 0.95),
refresh = 0)
# use fitted model to caculate p(difference between conditions > 0 | data)
tibble(cd = c("long", "brief")) %>%
add_fitted_draws(sim_model, re_formula = NA, scale = "response") %>%
ungroup() %>%
select(.draw, cd, .value) %>%
pivot_wider(names_from = cd, values_from = .value) %>%
mutate(difference = brief - long) %>%
summarise(prob_diff = mean(difference>0)) -> d
return(d$prob_diff)
}
d_pwr <- tibble()
for (itr in 1:50) {
n_obs = 15
n_trls = 32
d_pwr <- bind_rows(
d_pwr,
tibble(
n_obs = n_obs,
n_trls = n_trls,
power = get_p_difference(n_obs, n_trls)))
}
