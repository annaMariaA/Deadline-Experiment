# setwd("C:/Users/Marcin/Documents/GitHub/Deadline-Experiment")
deadline_dat <- as_tibble(readRDS("../data/processedRTandAccData.Rda"))
reward_dat <- as_tibble(readRDS("../data/processedRTandAccData.Rda"))
subjectsToRemove = c(22,19,12)#22 and 19 accuracy on homogenous trials below 50%, 12 RT on homogenous trials over 8s
reward_dat = (reward_dat[!(reward_dat$subj%in% subjectsToRemove),])
reward_dat$subj = as.factor(reward_dat$subj)
rm(subjectsToRemove)
# Tidy up a little
deadline_dat %>%
select(
observer = "subj",
condition = "version",
targ_side = "targSide",
block = "completed",
t = "trial",
rt = "RT",
acc) %>%
mutate(
block = as.factor(block),
observer = paste("d", observer, sep = "")) -> deadline_dat
reward_dat %>%
select(
observer = "subj",
condition = "incentive",
targ_side = "targSide",
block,
t = "trial",
rt = "RT",
acc) %>%
mutate(
observer = paste("r", observer, sep = "")) -> reward_dat
# set the seed, so running this file will give exactly the same numbers as in our paper (hopefully)!
set.seed(2020)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(fig.height = 4, fig.align = 'center')
library(brms)
library(tidyverse)
library(tidybayes)
library(patchwork)
library(lmerTest)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# import data
# source("import_and_tidy_data.R")
dat_rt_acc <- read_csv("dat_acc_rt.csv")
dat_fix <- read_csv("dat_fix.csv") %>% filter(n > 1)
dat_rt_acc %>%
filter(cd %in% c("long", "brief")) %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by(observer, cd, targ_side) %>%
summarise(accuracy = mean(acc), .groups = 'drop') %>%
ggplot(aes(x = cd, y = accuracy, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_x_discrete("condition") +
scale_y_continuous(limits = c(0, 1)) +
theme(legend.position = "none") -> p_acc
dat_rt_acc %>%
filter(
cd %in% c("long", "brief"),
acc == 1) %>%
group_by(observer, cd, targ_side) %>%
summarise(median_rt = median(rt), .groups = 'drop') %>%
ggplot(aes(x = cd, y = median_rt, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_x_discrete("condition") +
scale_y_log10("median rt", breaks = c(1,2,4,8,16)) +
theme(legend.position = "none") -> p_rt
p_acc / p_rt
ggsave("plots/exp_deadline_acc_rt.png", p_acc / p_rt, width = 8, height = 5)
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter(
cd %in% c("long", "brief"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, cd, n) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') -> d_strat
d_strat %>%
ggplot(aes(x = n, y = prop_hetero, colour = cd)) +
geom_line() +
facet_wrap(~ observer, ncol = 3) +
theme_bw() +
ggthemes::scale_colour_ptol() +
scale_y_continuous("prop. hetero. fix.", breaks = c(0, 0.5, 1)) +
theme(legend.position = "bottom",
strip.background = element_blank(),
strip.text.x = element_blank()) -> plt_strat_obs
d_strat %>% group_by(observer, cd) %>%
summarise(strategy = mean(prop_hetero), .groups = "drop") %>%
ggplot(aes(x = cd, y = strategy, colour = fct_rev(cd), fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.3, colour = "black") +
geom_point(alpha = 0.5) +
geom_path(aes(group = observer), colour = "grey", alpha = 0.5) +
ggthemes::scale_fill_ptol() +
ggthemes::scale_color_ptol() +
scale_y_continuous("prop. hetero. fix.") +
theme_bw() +
theme(legend.position = "none") +
ggtitle("(a) Empirical") -> plt_strategy
plt_strat_obs + plt_strategy + plot_layout(widths = c(2, 1))
dat_fix %>%
left_join(
dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter(
cd %in% c("long", "brief"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, cd, t) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') %>%
mutate(
prop_hetero = if_else(prop_hetero < 0.001, 0.001, prop_hetero),
prop_hetero = if_else(prop_hetero > 0.999, 0.999, prop_hetero)) -> d_strat
plot_deadline_predictions <- function(m, title)
{
tibble(cd = c("long", "brief")) %>%
add_fitted_draws(m, re_formula = NA) %>%
ungroup() %>%
select(.draw, cd, .value) %>%
pivot_wider(names_from = cd, values_from = .value) %>%
mutate(difference = brief - long) %>%
pivot_longer(-.draw, names_to = "cd", values_to = "prop_hetero") %>%
mutate(
cd = as_factor(cd),
cd = fct_relevel(cd, "long", "difference", "brief")) %>%
ggplot(aes(x = prop_hetero, fill = cd)) +
geom_vline(xintercept = 0) +
geom_vline(xintercept = 0.5, linetype = 2) +
geom_density(alpha = 0.3) +
scale_fill_manual(values = c("#CC6677", "#555555", "#4477AA")) +
theme_bw() + theme(axis.title.y = element_blank()) +
scale_x_continuous("prop. hetero. fix.", limits = c(-0.5, 1)) +
ggtitle(title) -> plt
return(plt)
}
model_priors <- c(
prior(normal(0, 1), class = "b"))
prior_model <- brm(
data = d_strat,
prop_hetero ~ 0 + cd + (cd | observer),
family = "beta",
sample_prior = "only",
prior = model_priors,
iter = 5000,
control = list(adapt_delta = 0.95))
plt_prior <- plot_deadline_predictions(prior_model, "(b) Prior")
plt_prior
power_prior <- c(
prior(normal(0.1, 0.25), class = "b", coef = "cdlong"),
prior(normal(0.7, 0.25), class = "b", coef = "cdbrief"),
prior(student_t(3, 0, 2), class = "sd"),
prior(gamma(1, 10), class = "phi")
)
power_model <- brm(
data = d_strat,
prop_hetero ~ 0 + cd + (cd | observer),
family = "beta",
sample_prior = "only",
prior = power_prior,
iter = 5000,
control = list(adapt_delta = 0.95),
refresh = 0)
# a function to generate a simlulated dataset.
sample_data <- function(n_obs, n_trl)
{
d_strat %>%
modelr::data_grid(
cd = c("long", "brief"),
observer = 1:n_obs) %>%
add_fitted_draws(
power_model,
n = n_trl,
re_formula = NULL,
scale = "response",
sample_new_levels = "gaussian",
allow_new_levels = TRUE) %>%
ungroup() %>%
select(observer, cd, prop_hetero = ".value") %>%
mutate(
prop_hetero = if_else(prop_hetero < 0.0001, 0.0001, prop_hetero),
prop_hetero = if_else(prop_hetero > 0.9999, 0.9999, prop_hetero)) -> d_sim
return(d_sim)
}
plt_power <- plot_deadline_predictions(power_model, "Power Predictions")
plt_power
sample_data(15, 32) %>%
group_by(cd) %>%
summarise(`mean prop. fix hetero.` = mean(prop_hetero), .groups = "drop") %>%
knitr::kable()
# a function that will the key statistic that we are interested in:
# the probability, given the data, that observers were more strategic in the brief condition than the long.
get_p_difference <- function(n_obs, n_trls) {
# simulate some data
d_sim <- sample_data(n_obs, n_trls)
# fit model to simulated data
sim_model <- brm(
data = d_sim,
prop_hetero ~ 0 + cd + (cd | observer),
family = "beta",
prior = model_priors,
iter = 5000,
control = list(adapt_delta = 0.95),
refresh = 0)
# use fitted model to caculate p(difference between conditions > 0 | data)
tibble(cd = c("long", "brief")) %>%
add_fitted_draws(sim_model, re_formula = NA, scale = "response") %>%
ungroup() %>%
select(.draw, cd, .value) %>%
pivot_wider(names_from = cd, values_from = .value) %>%
mutate(difference = brief - long) %>%
summarise(prob_diff = mean(difference>0)) -> d
return(d$prob_diff)
}
d_pwr <- tibble()
for (itr in 1:50) {
n_obs = 15
n_trls = 32
d_pwr <- bind_rows(
d_pwr,
tibble(
n_obs = n_obs,
n_trls = n_trls,
power = get_p_difference(n_obs, n_trls)))
}
library(brms)
library(tidyverse)
library(tidybayes)
library(patchwork)
library(lmerTest)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# import data
# source("import_and_tidy_data.R")
dat_rt_acc <- read_csv("dat_acc_rt.csv")
dat_fix <- read_csv("dat_fix.csv") %>% filter(n > 1)
dat_rt_acc %>%
filter(cd %in% c("long", "brief")) %>%
mutate(cd = fct_relevel(cd, "long")) %>%
group_by(observer, cd, targ_side) %>%
summarise(accuracy = mean(acc), .groups = 'drop') %>%
ggplot(aes(x = cd, y = accuracy, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_x_discrete("condition") +
scale_y_continuous(limits = c(0, 1)) +
theme(legend.position = "none") -> p_acc
dat_rt_acc %>%
filter(
cd %in% c("long", "brief"),
acc == 1) %>%
group_by(observer, cd, targ_side) %>%
summarise(median_rt = median(rt), .groups = 'drop') %>%
ggplot(aes(x = cd, y = median_rt, fill = fct_rev(cd))) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
ggthemes::scale_fill_ptol() +
scale_x_discrete("condition") +
scale_y_log10("median rt", breaks = c(1,2,4,8,16)) +
theme(legend.position = "none") -> p_rt
p_acc / p_rt
dat_rt_acc %>% filter(cd %in% c("flat", "reward")) %>%
group_by(observer, bk, cd, targ_side) %>%
summarise(accuracy = mean(acc), .groups = 'drop') %>%
ggplot(aes(x = bk, y = accuracy*100, fill = cd)) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
scale_fill_manual(values = c("#CC6677", "#117733")) + labs(fill = "condition")+
scale_y_continuous(limits = c(0, 100), name="accuracy (%)")  -> p_acc
dat_rt_acc %>% filter(cd %in% c("flat", "reward"), acc == 1) %>%
group_by(observer, bk, cd, targ_side) %>%
summarise(median_rt = median(rt), .groups = 'drop') %>%
ggplot(aes(x = bk, y = median_rt, fill = cd)) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
scale_fill_manual(values = c("#CC6677", "#117733")) + labs(fill = "condition")+
scale_y_log10("median rt (s)", breaks = c(1,2,4,8,16))  -> p_rt
p_acc / p_rt
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter(
cd %in% c("initial", "flat", "reward"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, bk, cd, n) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') -> d_strat
plt_strat_obs <- d_strat %>%
ggplot(aes(x = n, y = prop_hetero, colour = bk)) +
geom_line() +
facet_wrap(~ observer, ncol = 3) +
theme_bw() +
scale_colour_manual(values = c("#CC6677", "#117733")) +
scale_y_continuous("prop. hetero. fix.", breaks = c(0, 0.5, 1)) +
theme(legend.position = "bottom",
strip.background = element_blank(),
strip.text.x = element_blank())
plt_strategy <- d_strat %>%
group_by(observer, bk, cd) %>%
summarise(strategy = mean(prop_hetero)) %>%
ggplot(aes(x = bk, y = strategy, fill = cd)) +
geom_boxplot(alpha = 0.25) +
geom_point(alpha = 0.5) +
geom_path(aes(group = observer), colour = "grey", alpha = 0.5) +
scale_fill_manual(values = c("#CC6677", "#117733")) +
facet_wrap(~ cd) +
theme_bw() +
theme(legend.position = "none",
axis.title = element_blank()) +
ggtitle("(a) Empirical") -> plt_strategy
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter(
cd %in% c("flat", "reward"),
acc == 1,
targ_side == "absent") %>%
mutate(
cd = if_else(bk == "block 1", "initial", as.character(cd)),
cd = as_factor(cd)) %>%
group_by(observer, bk, cd, t) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') %>%
mutate(
prop_hetero = if_else(prop_hetero == 0, 0.01, prop_hetero),
prop_hetero = if_else(prop_hetero == 1, 0.99, prop_hetero))-> d_strat
model_priors <- c(
prior(normal(0, 1), class = "b"))
prior_model <- brm(
data = d_strat,
prop_hetero ~ 0 + cd + (cd | observer),
sample_prior = "only",
family = "beta",
prior = model_priors,
iter = 10000,
control = list(adapt_delta = 0.95))
plt_prior <- plot_reward_predictions(prior_model, "(b) Prior")
plot_reward_predictions <- function(m, title) {
tibble(cd = c("initial", "flat", "reward")) %>%
add_fitted_draws(m, re_formula = NA) %>%
ungroup() %>%
select(.draw, cd, .value) %>%
pivot_wider(names_from = cd, values_from = .value) %>%
mutate(
improv_flat = flat - initial,
improv_reward = reward - initial,
difference = improv_reward - improv_flat) %>%
select(-initial, -flat, -reward) %>%
pivot_longer(-.draw, names_to = "cd", values_to = "difference") %>%
mutate(
cd = as_factor(cd),
cd = fct_relevel(cd, "improv_flat", "difference", "improv_reward"),
cd = fct_recode(cd, flat = "improv_flat", reward = "improv_reward")) %>%
ggplot(aes(x = difference, fill = cd)) +
geom_vline(xintercept = 0, linetype = 2) +
geom_density(alpha = 0.3) +
theme_bw() +
scale_fill_manual(values = c("#CC6677", "#555555", "#117733")) +
ggtitle(title) -> plt
return(plt)
}
plt_prior <- plot_reward_predictions(prior_model, "(b) Prior")
plt_prior
power_prior <- c(
prior(normal(0.1, 0.25), class = "b", coef = "cdinitial"),
prior(normal(0.2, 0.25), class = "b", coef = "cdflat"),
prior(normal(0.7, 0.25), class = "b", coef = "cdreward"),
prior(student_t(3, 0, 2), class = "sd"),
prior(gamma(1, 10), class = "phi")
)
sample_reward_data <- function(n_obs, n_trl)
{
d_strat %>%
modelr::data_grid(
cd = c("initial", "flat", "reward"),
observer = 1:n_obs) %>%
add_fitted_draws(
power_model,
n = n_trl,
re_formula = NULL,
scale = "response",
sample_new_levels = "gaussian",
allow_new_levels = TRUE) %>%
ungroup() %>%
select(observer, cd, prop_hetero = ".value") %>%
mutate(
prop_hetero = if_else(prop_hetero < 0.0001, 0.0001, prop_hetero),
prop_hetero = if_else(prop_hetero > 0.9999, 0.9999, prop_hetero)) -> d_sim
return(d_sim)
}
get_p_difference_reward <- function(n_obs, n_trls) {
# simulate some data
d_sim <- sample_reward_data(n_obs, n_trls)
# fit model to simulated data
sim_model <- brm(
data = d_sim,
prop_hetero ~ 0 + cd + (cd | observer),
family = "beta",
prior = model_priors,
iter = 5000,
control = list(adapt_delta = 0.95),
refresh = 0)
# use fitted model to caculate p(difference between conditions > 0 | data)
tibble(cd = c("initial", "flat", "reward")) %>%
add_fitted_draws(sim_model, re_formula = NA, scale = "response") %>%
ungroup() %>%
select(.draw, cd, .value) %>%
pivot_wider(names_from = cd, values_from = .value) %>%
mutate(
flat = flat - initial,
reward = reward - initial,
difference = reward - flat) %>%
summarise(prob_diff = mean(difference>0)) -> d
return(d$prob_diff)
}
my_model <- brm(
data = d_strat,
prop_hetero ~ 0 + cd + (cd | observer),
family = "beta",
prior = model_priors,
iter = 10000,
control = list(adapt_delta = 0.95))
plt_posterior <- plot_reward_predictions(my_model, "Posterior Predictions")
plt_strategy / (plt_prior + plt_posterior) + plot_layout(guides = "collect")
plt_strategy
plt_strategy <- d_strat %>%
group_by(observer, bk, cd) %>%
summarise(strategy = mean(prop_hetero)) %>%
ggplot(aes(x = bk, y = strategy, fill = cd)) +
geom_boxplot(alpha = 0.25) +
geom_point(alpha = 0.5) +
geom_path(aes(group = observer), colour = "grey", alpha = 0.5) +
scale_fill_manual(values = c("#CC6677", "#117733")) +
facet_wrap(~ cd) +
theme_bw() +
theme(legend.position = "none") +
ggtitle("(a) Empirical") -> plt_strategy
plt_strategy
plt_strategy
plt_strategy <- d_strat %>%
group_by(observer, bk, cd) %>%
summarise(strategy = mean(prop_hetero)) %>%
ggplot(aes(x = bk, y = strategy, fill = cd)) +
geom_boxplot(alpha = 0.25) +
geom_point(alpha = 0.5) +
geom_path(aes(group = observer), colour = "grey", alpha = 0.5) +
scale_fill_manual(values = c("#CC6677", "#117733")) +
facet_wrap(~ cd) +
theme_bw() +
theme(legend.position = "none") +
ggtitle("(a) Empirical")
d_strat %>%
group_by(observer, bk, cd) %>%
summarise(strategy = mean(prop_hetero)) %>%
ggplot(aes(x = bk, y = strategy, fill = cd)) +
geom_boxplot(alpha = 0.25) +
geom_point(alpha = 0.5) +
geom_path(aes(group = observer), colour = "grey", alpha = 0.5) +
scale_fill_manual(values = c("#CC6677", "#117733")) +
facet_wrap(~ cd) +
theme_bw() +
theme(legend.position = "none") +
ggtitle("(a) Empirical") -> plt_strategy
plt_strategy
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "cd", "bk", "t")) %>%
filter(
cd %in% c("initial", "flat", "reward"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, bk, cd, n) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') -> d_strat
d_strat %>%
group_by(observer, bk, cd) %>%
summarise(strategy = mean(prop_hetero)) %>%
ggplot(aes(x = bk, y = strategy, fill = cd)) +
geom_boxplot(alpha = 0.25) +
geom_point(alpha = 0.5) +
geom_path(aes(group = observer), colour = "grey", alpha = 0.5) +
scale_fill_manual(values = c("#CC6677", "#117733")) +
facet_wrap(~ cd) +
theme_bw() +
theme(legend.position = "none") +
ggtitle("(a) Empirical") -> plt_strategy
plt_strategy
d_strat %>%
group_by(observer, bk, cd) %>%
summarise(strategy = mean(prop_hetero)) %>%
ggplot(aes(x = bk, y = strategy, fill = cd)) +
geom_boxplot(alpha = 0.25) +
geom_point(alpha = 0.5) +
geom_path(aes(group = observer), colour = "grey", alpha = 0.5) +
scale_fill_manual(values = c("#CC6677", "#117733")) +
facet_wrap(~ cd) +
theme_bw() +
theme(legend.position = "none",
axis.title.x = element_blank()) +
ggtitle("(a) Empirical") -> plt_strategy
plt_strategy / (plt_prior + plt_posterior) + plot_layout(guides = "collect")
ggsave(
"plots/reward_model.png",
plt_strategy / (plt_prior + plt_posterior) + plot_layout(guides = "collect"),
width = 8,
height = 5)
install.packages("RcppRoll")
