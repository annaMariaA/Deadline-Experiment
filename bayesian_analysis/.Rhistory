ggplot(aes(x = condition, y = median_rt, fill = condition)) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
scale_fill_viridis_d(end = 0.7) +
scale_y_log10("median rt", breaks = c(1,2,4,8,16)) +
theme(legend.position = "none")
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "condition", "block", "t")) %>%
filter(
condition %in% c("long", "brief"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, condition, n) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') -> d_strat
d_strat %>%
ggplot(aes(x = n, y = prop_hetero, colour = condition)) +
geom_line() +
facet_wrap(~ observer, ncol = 3) +
theme_bw() +
scale_colour_viridis_d(end = 0.7) +
scale_y_continuous("prop. hetero. fix.", breaks = c(0, 0.5, 1)) +
theme(legend.position = "bottom",
strip.background = element_blank(),
strip.text.x = element_blank()) -> plt_strat_obs
d_strat %>% group_by(observer, condition, n) %>%
summarise(strategy = mean(prop_hetero)) %>%
ggplot(aes(x = condition, y = strategy, fill = condition)) +
geom_boxplot(alpha = 0.25) +
scale_fill_viridis_d(end = 0.7) +
theme_bw() +
theme(legend.position = "none",
axis.title = element_blank()) -> plt_strategy
plt_strat_obs + plt_strategy + plot_layout(widths = c(2, 1))
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "condition", "block", "t")) %>%
filter(
condition %in% c("long", "brief"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, condition, t) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') %>%
mutate(
prop_hetero = if_else(prop_hetero == 1, 0.99, prop_hetero),
prop_hetero = if_else(prop_hetero == 0, 0.01, prop_hetero))-> d_strat
plot_deadline_predictions <- function(m, title) {
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(m, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long) %>%
pivot_longer(-.draw, names_to = "condition", values_to = "prop_hetero") %>%
mutate(
condition = as_factor(condition),
condition = fct_relevel(condition, "long", "difference", "brief")) %>%
ggplot(aes(x = prop_hetero, fill = condition)) +
geom_vline(xintercept = 0) + geom_vline(xintercept = 0.5, linetype = 2) +
geom_density(alpha = 0.3) +
theme_bw() +
scale_x_continuous(limits = c(-1, 1))
ggtitle(title) -> plt
return(plt)
}
model_priors <- c(
# prior(normal(0.5, 0.1), class = "Intercept"),
prior(normal(0, 1), class = "b"))
prior_model <- brm(
data = d_strat,
prop_hetero ~ 0 + condition + (condition | observer),
family = "beta",
sample_prior = "only",
prior = model_priors,
iter = 10000,
control = list(adapt_delta = 0.95))
plot_deadline_predictions(prior_model, "Prior Predictions")
plot_deadline_predictions <- function(m, title) {
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(m, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long) %>%
pivot_longer(-.draw, names_to = "condition", values_to = "prop_hetero") %>%
mutate(
condition = as_factor(condition),
condition = fct_relevel(condition, "long", "difference", "brief")) %>%
ggplot(aes(x = prop_hetero, fill = condition)) +
geom_vline(xintercept = 0) + geom_vline(xintercept = 0.5, linetype = 2) +
geom_density(alpha = 0.3) +
theme_bw() +
scale_x_continuous(limits = c(-1, 1)) +
ggtitle(title) -> plt
return(plt)
}
plot_deadline_predictions(prior_model, "Prior Predictions")
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(m, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long) %>%
pivot_longer(-.draw, names_to = "condition", values_to = "prop_hetero") %>%
mutate(
condition = as_factor(condition),
condition = fct_relevel(condition, "long", "difference", "brief"))
m <- prior_model
m
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(m, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long) %>%
pivot_longer(-.draw, names_to = "condition", values_to = "prop_hetero") %>%
mutate(
condition = as_factor(condition),
condition = fct_relevel(condition, "long", "difference", "brief"))
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(m, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long)
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(m, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long) %>%
summarise(prob_diff_greater_zero = mean(difference > 0))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.height=4)
library(brms)
library(tidyverse)
library(tidybayes)
library(patchwork)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# import data
source("import_and_tidy_data.R")
dat_rt_acc %>% filter(condition %in% c("long", "brief")) %>%
group_by(observer, condition, targ_side) %>%
summarise(accuracy = mean(acc), .groups = 'drop') %>%
ggplot(aes(x = condition, y = accuracy, fill = condition)) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
scale_fill_viridis_d(end = 0.7) +
scale_y_continuous(limits = c(0.5, 1)) +
theme(legend.position = "none")
dat_rt_acc %>% filter(condition %in% c("long", "brief"), acc == 1) %>%
group_by(observer, condition, targ_side) %>%
summarise(median_rt = median(rt), .groups = 'drop') %>%
ggplot(aes(x = condition, y = median_rt, fill = condition)) +
geom_boxplot(alpha = 0.25) +
facet_wrap(~ targ_side) +
theme_bw() +
scale_fill_viridis_d(end = 0.7) +
scale_y_log10("median rt", breaks = c(1,2,4,8,16)) +
theme(legend.position = "none")
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "condition", "block", "t")) %>%
filter(
condition %in% c("long", "brief"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, condition, n) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') -> d_strat
d_strat %>%
ggplot(aes(x = n, y = prop_hetero, colour = condition)) +
geom_line() +
facet_wrap(~ observer, ncol = 3) +
theme_bw() +
scale_colour_viridis_d(end = 0.7) +
scale_y_continuous("prop. hetero. fix.", breaks = c(0, 0.5, 1)) +
theme(legend.position = "bottom",
strip.background = element_blank(),
strip.text.x = element_blank()) -> plt_strat_obs
d_strat %>% group_by(observer, condition, n) %>%
summarise(strategy = mean(prop_hetero)) %>%
ggplot(aes(x = condition, y = strategy, fill = condition)) +
geom_boxplot(alpha = 0.25) +
scale_fill_viridis_d(end = 0.7) +
theme_bw() +
theme(legend.position = "none",
axis.title = element_blank()) -> plt_strategy
plt_strat_obs + plt_strategy + plot_layout(widths = c(2, 1))
dat_fix %>% left_join(dat_rt_acc,
by = c("observer", "condition", "block", "t")) %>%
filter(
condition %in% c("long", "brief"),
acc == 1,
targ_side == "absent") %>%
group_by(observer, condition, t) %>%
summarise(prop_hetero = mean(hetero_fix), .groups = 'drop') %>%
mutate(
prop_hetero = if_else(prop_hetero == 1, 0.99, prop_hetero),
prop_hetero = if_else(prop_hetero == 0, 0.01, prop_hetero))-> d_strat
plot_deadline_predictions <- function(m, title) {
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(m, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long) %>%
pivot_longer(-.draw, names_to = "condition", values_to = "prop_hetero") %>%
mutate(
condition = as_factor(condition),
condition = fct_relevel(condition, "long", "difference", "brief")) %>%
ggplot(aes(x = prop_hetero, fill = condition)) +
geom_vline(xintercept = 0) + geom_vline(xintercept = 0.5, linetype = 2) +
geom_density(alpha = 0.3) +
theme_bw() +
scale_x_continuous("prop. hetero. fix.", limits = c(-1, 1)) +
ggtitle(title) -> plt
return(plt)
}
model_priors <- c(
# prior(normal(0.5, 0.1), class = "Intercept"),
prior(normal(0, 1), class = "b"))
prior_model <- brm(
data = d_strat,
prop_hetero ~ 0 + condition + (condition | observer),
family = "beta",
sample_prior = "only",
prior = model_priors,
iter = 10000,
control = list(adapt_delta = 0.95))
get_prior(prior_model)
prior_summary(prior_model)
pretend_posterior <- c(
prior(normal(0.1, 0.5), class = "b", coef = "conditionlong"),
prior(normal(0.5, 0.5), class = "b", coef = "conditionbrief"))
power_model <- brm(
data = d_strat,
prop_hetero ~ 0 + condition + (condition | observer),
family = "beta",
sample_prior = "only",
prior = pretend_posterior,
iter = 10000,
control = list(adapt_delta = 0.95))
plt_power <- plot_deadline_predictions(power_model, "Power Predictions")
plt_power
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(m)
power_model
?add_fitted_draws
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(power_model, re_formula = "allow_new_levels")
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(power_model, allow_new_levels = TRUE)
tibble(condition = c("long", "brief"), observer = 10) %>%
add_fitted_draws(power_model, allow_new_levels = TRUE)
tibble(condition = c("long", "brief"), observer = 1:60) %>%
add_fitted_draws(power_model, allow_new_levels = TRUE)
modelr::data_grid(condition = c("long", "brief"), observer = 1:6) %>%
add_fitted_draws(power_model, allow_new_levels = TRUE)
modelr::data_grid(d_strat, condition = c("long", "brief"), observer = 1:6) %>%
add_fitted_draws(power_model, allow_new_levels = TRUE)
modelr::data_grid(d_strat, condition = c("long", "brief"), observer = 1:6) %>%
add_fitted_draws(power_model, allow_new_levels = TRUE, scale = "response")
modelr::data_grid(d_strat, condition = c("long", "brief"), observer = 1:6) %>%
add_fitted_draws(power_model, allow_new_levels = TRUE, scale = "response", n = 1)
modelr::data_grid(d_strat, condition = c("long", "brief"), observer = 1:6) %>%
add_fitted_draws(power_model, allow_new_levels = TRUE, scale = "response", n = 1)
?brms::predict.brmsfit
modelr::data_grid(d_strat, condition = c("long", "brief"), observer = 1:6) %>%
add_fitted_draws(power_model, allow_new_levels = TRUE, scale = "response", n = 10)
modelr::data_grid(d_strat, condition = c("long", "brief"), observer = 1:6) %>%
add_fitted_draws(power_model, allow_new_levels = TRUE, scale = "response", n = 3)
modelr::data_grid(d_strat, condition = c("long", "brief"), observer = 1:6) %>%
add_fitted_draws(power_model, scale = "response", n = 3)
modelr::data_grid(d_strat, condition = c("long", "brief"), observer = 1:6) %>%
add_fitted_draws(power_model, re_formula = NULL, scale = "response", n = 3)
modelr::data_grid(d_strat, condition = c("long", "brief"), observer = 1:6) %>%
add_fitted_draws(power_model, re_formula = NULL, scale = "response", n = 3, allow_new_levels = TRUE)
summary(d_strat)
unique(d_strat$observer)
modelr::data_grid(d_strat, condition = c("long", "brief"), observer = unique(d_strat$observer)) %>%
add_fitted_draws(power_model, re_formula = NULL, scale = "response", n = 3, allow_new_levels = TRUE)
modelr::data_grid(d_strat, condition = c("long", "brief"), observer = 1:4) %>%
add_fitted_draws(power_model, re_formula = NULL, scale = "response", n = 3, sample_new_levels = TRUE)
modelr::data_grid(d_strat, condition = c("long", "brief"), observer = 1:4) %>%
add_fitted_draws(power_model, re_formula = NULL, scale = "response", n = 3, sample_new_levels = "gaussian")
modelr::data_grid(d_strat, condition = c("long", "brief"), observer = 1:4) %>%
add_fitted_draws(power_model, re_formula = NULL, scale = "response", n = 3, sample_new_levels = "gaussian", allow_new_levels)
modelr::data_grid(d_strat, condition = c("long", "brief"), observer = 1:4) %>%
add_fitted_draws(power_model, re_formula = NULL, scale = "response", n = 3, sample_new_levels = "gaussian", allow_new_levels = TRUE)
?add_fitted_draws
n_obs = 3
n_trial = 3
d_strat %>%
modelr::data_grid(
condition = c("long", "brief"),
observer = 1:n_obs) %>%
add_fitted_draws(
power_model,
n = n_trials,
resp = prop_hetero,
re_formula = NULL,
scale = "response",
sample_new_levels = "gaussian",
allow_new_levels = TRUE) %>%
select(observer, condition, prop_hetero) -> d_sim
n_trials = 3
d_strat %>%
modelr::data_grid(
condition = c("long", "brief"),
observer = 1:n_obs) %>%
add_fitted_draws(
power_model,
n = n_trials,
resp = prop_hetero,
re_formula = NULL,
scale = "response",
sample_new_levels = "gaussian",
allow_new_levels = TRUE) %>%
select(observer, condition, prop_hetero) -> d_sim
d_strat %>%
modelr::data_grid(
condition = c("long", "brief"),
observer = 1:n_obs) %>%
add_fitted_draws(
power_model,
n = n_trials,
re_formula = NULL,
scale = "response",
sample_new_levels = "gaussian",
allow_new_levels = TRUE) %>%
select(observer, condition, prop_hetero = ".value")
sample_data <- function(n_obs, n_trl)
{
d_strat %>%
modelr::data_grid(
condition = c("long", "brief"),
observer = 1:n_obs) %>%
add_fitted_draws(
power_model,
n = n_trl,
re_formula = NULL,
scale = "response",
sample_new_levels = "gaussian",
allow_new_levels = TRUE) %>%
select(observer, condition, prop_hetero = ".value") -> d_sim
}
sample_data(1,1)
sample_data <- function(n_obs, n_trl)
{
d_strat %>%
modelr::data_grid(
condition = c("long", "brief"),
observer = 1:n_obs) %>%
add_fitted_draws(
power_model,
n = n_trl,
re_formula = NULL,
scale = "response",
sample_new_levels = "gaussian",
allow_new_levels = TRUE) %>%
select(observer, condition, prop_hetero = ".value") -> d_sim
return(d_sim)
}
sample_data <- function(n_obs, n_trl)
{
d_strat %>%
modelr::data_grid(
condition = c("long", "brief"),
observer = 1:n_obs) %>%
add_fitted_draws(
power_model,
n = n_trl,
re_formula = NULL,
scale = "response",
sample_new_levels = "gaussian",
allow_new_levels = TRUE) %>%
select(observer, condition, prop_hetero = ".value") -> d_sim
return(d_sim)
}
sample_data(1,1)
prior_summary(power_model)
pretend_posterior <- c(
prior(normal(0.1, 0.5), class = "b", coef = "conditionlong"),
prior(normal(1, 0.5), class = "b", coef = "conditionbrief"),
prior(student_t(3, 0, 1), class = "sd", coef = "conditionbrief"),
)
pretend_posterior <- c(
prior(normal(0.1, 0.5), class = "b", coef = "conditionlong"),
prior(normal(1, 0.5), class = "b", coef = "conditionbrief"),
prior(student_t(3, 0, 1), class = "sd", coef = "conditionbrief"))
pretend_posterior <- c(
prior(normal(0.1, 0.5), class = "b", coef = "conditionlong"),
prior(normal(1, 0.5), class = "b", coef = "conditionbrief"),
prior(student_t(3, 0, 1), class = "sd", coef = "conditionbrief"))
power_model <- brm(
data = d_strat,
prop_hetero ~ 0 + condition + (condition | observer),
family = "beta",
sample_prior = "only",
prior = pretend_posterior,
iter = 5000,
control = list(adapt_delta = 0.95))
pretend_posterior <- c(
prior(normal(0.1, 0.5), class = "b", coef = "conditionlong"),
prior(normal(1, 0.5), class = "b", coef = "conditionbrief"),
prior(student_t(3, 0, 1), class = "sd"))
power_model <- brm(
data = d_strat,
prop_hetero ~ 0 + condition + (condition | observer),
family = "beta",
sample_prior = "only",
prior = pretend_posterior,
iter = 5000,
control = list(adapt_delta = 0.95))
plt_power <- plot_deadline_predictions(power_model, "Power Predictions")
plt_power
sample_data <- function(n_obs, n_trl)
{
d_strat %>%
modelr::data_grid(
condition = c("long", "brief"),
observer = 1:n_obs) %>%
add_fitted_draws(
power_model,
n = n_trl,
re_formula = NULL,
scale = "response",
sample_new_levels = "gaussian",
allow_new_levels = TRUE) %>%
ungroup() %>%
select(observer, condition, prop_hetero = ".value") -> d_sim
return(d_sim)
}
sample_data <- function(11,1)
sample_data <- function(1,1)
sample_data(1,1)
sample_data(1,1)
power_model
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(power_model, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long)
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(sim_model, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long) %>%
summarise(mean(differece>0))
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(power_model, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long) %>%
summarise(mean(differece>0))
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(power_model, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long) %>%
summarise(mean(difference>0))
get_p_difference <- function(n_obs, n_trls) {
d_sim <- sample_data(n_obs, n_trls)
sim_model <- brm(
data = d_sim,
prop_hetero ~ 0 + condition + (condition | observer),
family = "beta",
sample_prior = "only",
prior = model_priors,
iter = 5000,
control = list(adapt_delta = 0.95))
tibble(condition = c("long", "brief")) %>%
add_fitted_draws(sim_model, re_formula = NA) %>%
ungroup() %>%
select(.draw, condition, .value) %>%
pivot_wider(names_from = condition, values_from = .value) %>%
mutate(difference = brief - long) %>%
summarise(prob_diff = mean(difference>0)) -> d
return(d$prob_diff)
}
rep(seq(5, 20, 5), 5)
d_pwr <- map_dfr(rep(seq(5, 20, 5), 5), get_p_difference, n_trls = 30)
d_pwr
d_pwr
d_pwr <- map_dfr(n_obs = rep(seq(5, 10, 5), 1), get_p_difference, n_trls = 30)
d_pwr <- map(n_obs = rep(seq(5, 10, 5), 1), get_p_difference, n_trls = 30)
d_pwr <- map(rep(seq(5, 10, 5), 1), get_p_difference, n_trls = 30)
d_pwr
d_pwr <- pmap(rep(seq(5, 10, 5), 1), get_p_difference, n_trls = 30)
modelr:data_grid(n_trls = rep(seq(5, 10, 5,), 1))
modelr::data_grid(n_trls = rep(seq(5, 10, 5,), 1))
d_pwr <- pmap(
, get_p_difference, n_trls = 30)
tibble(
n_obs = rep(seq(5, 10, 5), 2),
n_trls = rep(c(20, 50), each =2)
)
d_pwr <- pmap_dfr(
tibble(
n_obs = rep(seq(5, 10, 5), 2),
n_trls = rep(c(20, 50), each =2)),
get_p_difference)
d_pwr <- pmap(
tibble(
n_obs = rep(seq(5, 10, 5), 2),
n_trls = rep(c(20, 50), each =2)),
get_p_difference)
d_pwr
